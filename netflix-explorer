{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":12653991,"sourceType":"datasetVersion","datasetId":7996917}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Netflix Study\nThe goal of this project is to practice and showcase key data science skills, like EDA, SQL style querying, statistical analysis, visualization, and storytelling.","metadata":{}},{"cell_type":"code","source":"import numpy as np \nimport pandas as pd","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-10-08T01:21:05.001641Z","iopub.execute_input":"2025-10-08T01:21:05.001907Z","iopub.status.idle":"2025-10-08T01:21:07.578255Z","shell.execute_reply.started":"2025-10-08T01:21:05.001888Z","shell.execute_reply":"2025-10-08T01:21:07.577159Z"}},"outputs":[],"execution_count":2},{"cell_type":"markdown","source":"## EDA","metadata":{}},{"cell_type":"code","source":"movies = pd.read_csv(\"/kaggle/input/netflix-2025user-behavior-dataset-210k-records/movies.csv\")\nrec_logs = pd.read_csv(\"/kaggle/input/netflix-2025user-behavior-dataset-210k-records/recommendation_logs.csv\")\nreviews = pd.read_csv(\"/kaggle/input/netflix-2025user-behavior-dataset-210k-records/reviews.csv\")\nsearch_logs = pd.read_csv(\"/kaggle/input/netflix-2025user-behavior-dataset-210k-records/search_logs.csv\")\nusers = pd.read_csv(\"/kaggle/input/netflix-2025user-behavior-dataset-210k-records/users.csv\")\nsessions = pd.read_csv(\"/kaggle/input/netflix-2025user-behavior-dataset-210k-records/watch_history.csv\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T01:21:09.225095Z","iopub.execute_input":"2025-10-08T01:21:09.225504Z","iopub.status.idle":"2025-10-08T01:21:10.230418Z","shell.execute_reply.started":"2025-10-08T01:21:09.225480Z","shell.execute_reply":"2025-10-08T01:21:10.229625Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"names = [\"movies\", \"users\", \"sessions\"]\ndfs = [movies, users, sessions] \nfor name, df in zip(names, dfs):\n    print(f\"----------------------- {name} -----------------------\")\n    print(df.shape)\n    #print(df.head(2))\n    print(df.info())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T01:21:10.260060Z","iopub.execute_input":"2025-10-08T01:21:10.260330Z","iopub.status.idle":"2025-10-08T01:21:10.356080Z","shell.execute_reply.started":"2025-10-08T01:21:10.260309Z","shell.execute_reply":"2025-10-08T01:21:10.355022Z"}},"outputs":[{"name":"stdout","text":"----------------------- movies -----------------------\n(1040, 18)\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1040 entries, 0 to 1039\nData columns (total 18 columns):\n #   Column               Non-Null Count  Dtype  \n---  ------               --------------  -----  \n 0   movie_id             1040 non-null   object \n 1   title                1040 non-null   object \n 2   content_type         1040 non-null   object \n 3   genre_primary        1040 non-null   object \n 4   genre_secondary      373 non-null    object \n 5   release_year         1040 non-null   int64  \n 6   duration_minutes     1040 non-null   float64\n 7   rating               1040 non-null   object \n 8   language             1040 non-null   object \n 9   country_of_origin    1040 non-null   object \n 10  imdb_rating          890 non-null    float64\n 11  production_budget    365 non-null    float64\n 12  box_office_revenue   331 non-null    float64\n 13  number_of_seasons    289 non-null    float64\n 14  number_of_episodes   321 non-null    float64\n 15  is_netflix_original  1040 non-null   bool   \n 16  added_to_platform    1040 non-null   object \n 17  content_warning      1040 non-null   bool   \ndtypes: bool(2), float64(6), int64(1), object(9)\nmemory usage: 132.2+ KB\nNone\n----------------------- users -----------------------\n(10300, 16)\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 10300 entries, 0 to 10299\nData columns (total 16 columns):\n #   Column                   Non-Null Count  Dtype  \n---  ------                   --------------  -----  \n 0   user_id                  10300 non-null  object \n 1   email                    10300 non-null  object \n 2   first_name               10300 non-null  object \n 3   last_name                10300 non-null  object \n 4   age                      9071 non-null   float64\n 5   gender                   9476 non-null   object \n 6   country                  10300 non-null  object \n 7   state_province           10300 non-null  object \n 8   city                     10300 non-null  object \n 9   subscription_plan        10300 non-null  object \n 10  subscription_start_date  10300 non-null  object \n 11  is_active                10300 non-null  bool   \n 12  monthly_spend            9283 non-null   float64\n 13  primary_device           10300 non-null  object \n 14  household_size           8755 non-null   float64\n 15  created_at               10300 non-null  object \ndtypes: bool(1), float64(3), object(12)\nmemory usage: 1.2+ MB\nNone\n----------------------- sessions -----------------------\n(105000, 12)\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 105000 entries, 0 to 104999\nData columns (total 12 columns):\n #   Column                  Non-Null Count   Dtype  \n---  ------                  --------------   -----  \n 0   session_id              105000 non-null  object \n 1   user_id                 105000 non-null  object \n 2   movie_id                105000 non-null  object \n 3   watch_date              105000 non-null  object \n 4   device_type             105000 non-null  object \n 5   watch_duration_minutes  92668 non-null   float64\n 6   progress_percentage     96486 non-null   float64\n 7   action                  105000 non-null  object \n 8   quality                 105000 non-null  object \n 9   location_country        105000 non-null  object \n 10  is_download             105000 non-null  bool   \n 11  user_rating             21097 non-null   float64\ndtypes: bool(1), float64(3), object(8)\nmemory usage: 8.9+ MB\nNone\n","output_type":"stream"}],"execution_count":4},{"cell_type":"markdown","source":"### Duplicate Removal","metadata":{}},{"cell_type":"code","source":"# check for any duplicates & remove them\nfor name, df in zip(names, dfs):\n    dupes = df.duplicated().sum()\n    print(f\"{name}: {dupes} duplicate rows\")\n    df.drop_duplicates(inplace=True)\n    dupes = df.duplicated().sum()\n    print(f\"{dupes} duplicate rows after removal\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T01:22:13.731663Z","iopub.execute_input":"2025-10-08T01:22:13.731990Z","iopub.status.idle":"2025-10-08T01:22:14.029763Z","shell.execute_reply.started":"2025-10-08T01:22:13.731965Z","shell.execute_reply":"2025-10-08T01:22:14.028793Z"}},"outputs":[{"name":"stdout","text":"movies: 40 duplicate rows\n0 duplicate rows after removal\nusers: 300 duplicate rows\n0 duplicate rows after removal\nsessions: 5000 duplicate rows\n0 duplicate rows after removal\n","output_type":"stream"}],"execution_count":5},{"cell_type":"code","source":"# check for any rows with missing primary keys\nfor name, df in [(\"movies\", movies), (\"users\", users), (\"sessions\", sessions)]:\n    print(f\"{name}: \")\n    for col in ['movie_id', 'user_id', 'session_id']:\n        if col in df.columns:\n            print(\"           \", col, df[col].isna().sum())\n    print(f\"-----------------------\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T01:31:47.400966Z","iopub.execute_input":"2025-10-08T01:31:47.401305Z","iopub.status.idle":"2025-10-08T01:31:47.426630Z","shell.execute_reply.started":"2025-10-08T01:31:47.401283Z","shell.execute_reply":"2025-10-08T01:31:47.425384Z"}},"outputs":[{"name":"stdout","text":"movies: \n            movie_id 0\n-----------------------\nusers: \n            user_id 0\n-----------------------\nsessions: \n            movie_id 0\n            user_id 0\n            session_id 0\n-----------------------\n","output_type":"stream"}],"execution_count":16},{"cell_type":"markdown","source":"### Handling Missing Data\nThis section takes a look at missing data in the datasets and how to handle each case. The type of data imputation used depends on several factors, like what percent of the values are missing, if the data should be categorical or numerical, which samples the data is missing from, etc.","metadata":{}},{"cell_type":"code","source":"#check for missing entries\nfor name, df in zip(names, dfs):\n    print(f\"----------------------- {name} -----------------------\")    \n    na_counts = df.isna().sum() # get NaN ocounts\n    na_means = df.isna().mean().round(2) # get percent of missing data instead of counts\n    \n    na_counts = na_counts[na_counts > 0] # only include the categories with missing values\n    na_means = na_means[na_means > 0]\n    \n    #print(na_counts.sort_values(ascending=False)) \n    print(na_means.sort_values(ascending=False)) ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T01:34:53.223216Z","iopub.execute_input":"2025-10-08T01:34:53.224194Z","iopub.status.idle":"2025-10-08T01:34:53.338579Z","shell.execute_reply.started":"2025-10-08T01:34:53.224156Z","shell.execute_reply":"2025-10-08T01:34:53.337876Z"}},"outputs":[{"name":"stdout","text":"----------------------- movies -----------------------\nnumber_of_seasons     0.72\nnumber_of_episodes    0.70\nbox_office_revenue    0.68\nproduction_budget     0.65\ngenre_secondary       0.64\nimdb_rating           0.14\ndtype: float64\n----------------------- users -----------------------\nhousehold_size    0.15\nage               0.12\nmonthly_spend     0.10\ngender            0.08\ndtype: float64\n----------------------- sessions -----------------------\nuser_rating               0.80\nwatch_duration_minutes    0.12\nprogress_percentage       0.08\ndtype: float64\n","output_type":"stream"}],"execution_count":21},{"cell_type":"markdown","source":"### Row Removal:\n- `df.dropna(axis = 0, how = 'any')` removes rows with any missing values\n- `df.dropna(axis = 0, subset = 'desired_column')` removes rows with missing values in the specified column\nProbably do not want to remove entire rows as this can break joins later. Dropping missing data can also be risky if the data is missing from specific groups of samples that we do not want to exclude from our data.\n### Data Imputation Options:\n- Interpolation: `df['desired_column'].interpolate(method = 'linear')` good for linear or chronological data\n- fillna/ffill/bfill: `df['desired_column'].ffill()` fills missing value with the previously filled value\n- Conditional fill: `df.loc[df['desired_column'].isna(), 'desired_columns'] = df['other_column'] / 10`\n- \"Unknown\" fill (for categorical data): `fillna('Unknown')`","metadata":{}},{"cell_type":"code","source":"movies['genre_secondary'] = movies['genre_secondary'].fillna('Unknown')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T02:13:23.218253Z","iopub.execute_input":"2025-10-08T02:13:23.221279Z","iopub.status.idle":"2025-10-08T02:13:23.232373Z","shell.execute_reply.started":"2025-10-08T02:13:23.221241Z","shell.execute_reply":"2025-10-08T02:13:23.231022Z"}},"outputs":[],"execution_count":53},{"cell_type":"code","source":"movies.head(10)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T01:55:09.082215Z","iopub.execute_input":"2025-10-08T01:55:09.082503Z","iopub.status.idle":"2025-10-08T01:55:09.120472Z","shell.execute_reply.started":"2025-10-08T01:55:09.082484Z","shell.execute_reply":"2025-10-08T01:55:09.119483Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n  has_large_values = (abs_vals > 1e6).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n","output_type":"stream"},{"execution_count":22,"output_type":"execute_result","data":{"text/plain":"     movie_id            title     content_type genre_primary genre_secondary  \\\n0  movie_0001    Dragon Legend  Stand-up Comedy       History        Thriller   \n1  movie_0002    Storm Warrior  Stand-up Comedy        Sci-Fi             NaN   \n2  movie_0003      Fire Family            Movie         Drama             NaN   \n3  movie_0004     Our Princess      Documentary        Sci-Fi             NaN   \n4  movie_0005  Warrior Mission      Documentary         Sport         Mystery   \n5  movie_0006  Kingdom Phoenix            Movie   Documentary           Music   \n6  movie_0007     Battle Story        TV Series        Sci-Fi             NaN   \n7  movie_0008        Old House            Movie        Horror             NaN   \n8  movie_0009    Dragon Empire            Movie     Biography             NaN   \n9  movie_0010        Dream War   Limited Series      Thriller       Animation   \n\n   release_year  duration_minutes rating  language country_of_origin  \\\n0          2014              35.0   TV-Y    French             Japan   \n1          2017              37.0     PG  Japanese               USA   \n2          2003             142.0  TV-MA   English               USA   \n3          2011             131.0  NC-17  Japanese               USA   \n4          2015              91.0   TV-G   English               USA   \n5          1997             113.0  PG-13   English               USA   \n6          2003              52.0  TV-Y7   English               USA   \n7          1991             109.0   TV-Y   Spanish       South Korea   \n8          2013             123.0     PG   Spanish               USA   \n9          2019              49.0   TV-Y   Italian             Japan   \n\n   imdb_rating  production_budget  box_office_revenue  number_of_seasons  \\\n0          NaN                NaN                 NaN                NaN   \n1          3.3                NaN                 NaN                NaN   \n2          8.5          2114120.0                 NaN                NaN   \n3          5.3                NaN                 NaN                NaN   \n4          3.1                NaN                 NaN                NaN   \n5          8.0          4214426.0            792291.0                NaN   \n6          NaN                NaN                 NaN                NaN   \n7          7.7           629216.0           3995303.0                NaN   \n8          8.4                NaN                 NaN                NaN   \n9          8.2                NaN                 NaN               12.0   \n\n   number_of_episodes  is_netflix_original added_to_platform  content_warning  \n0                 NaN                False        2023-08-07            False  \n1                 NaN                False        2022-01-28             True  \n2                 NaN                False        2021-05-04             True  \n3                 NaN                False        2022-11-26            False  \n4                 NaN                False        2023-06-15            False  \n5                 NaN                False        2021-01-21            False  \n6               158.0                False        2021-11-30            False  \n7                 NaN                False        2020-10-04            False  \n8                 NaN                False        2024-05-09            False  \n9                32.0                False        2021-09-20            False  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movie_id</th>\n      <th>title</th>\n      <th>content_type</th>\n      <th>genre_primary</th>\n      <th>genre_secondary</th>\n      <th>release_year</th>\n      <th>duration_minutes</th>\n      <th>rating</th>\n      <th>language</th>\n      <th>country_of_origin</th>\n      <th>imdb_rating</th>\n      <th>production_budget</th>\n      <th>box_office_revenue</th>\n      <th>number_of_seasons</th>\n      <th>number_of_episodes</th>\n      <th>is_netflix_original</th>\n      <th>added_to_platform</th>\n      <th>content_warning</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>movie_0001</td>\n      <td>Dragon Legend</td>\n      <td>Stand-up Comedy</td>\n      <td>History</td>\n      <td>Thriller</td>\n      <td>2014</td>\n      <td>35.0</td>\n      <td>TV-Y</td>\n      <td>French</td>\n      <td>Japan</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>2023-08-07</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>movie_0002</td>\n      <td>Storm Warrior</td>\n      <td>Stand-up Comedy</td>\n      <td>Sci-Fi</td>\n      <td>NaN</td>\n      <td>2017</td>\n      <td>37.0</td>\n      <td>PG</td>\n      <td>Japanese</td>\n      <td>USA</td>\n      <td>3.3</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>2022-01-28</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>movie_0003</td>\n      <td>Fire Family</td>\n      <td>Movie</td>\n      <td>Drama</td>\n      <td>NaN</td>\n      <td>2003</td>\n      <td>142.0</td>\n      <td>TV-MA</td>\n      <td>English</td>\n      <td>USA</td>\n      <td>8.5</td>\n      <td>2114120.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>2021-05-04</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>movie_0004</td>\n      <td>Our Princess</td>\n      <td>Documentary</td>\n      <td>Sci-Fi</td>\n      <td>NaN</td>\n      <td>2011</td>\n      <td>131.0</td>\n      <td>NC-17</td>\n      <td>Japanese</td>\n      <td>USA</td>\n      <td>5.3</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>2022-11-26</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>movie_0005</td>\n      <td>Warrior Mission</td>\n      <td>Documentary</td>\n      <td>Sport</td>\n      <td>Mystery</td>\n      <td>2015</td>\n      <td>91.0</td>\n      <td>TV-G</td>\n      <td>English</td>\n      <td>USA</td>\n      <td>3.1</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>2023-06-15</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>movie_0006</td>\n      <td>Kingdom Phoenix</td>\n      <td>Movie</td>\n      <td>Documentary</td>\n      <td>Music</td>\n      <td>1997</td>\n      <td>113.0</td>\n      <td>PG-13</td>\n      <td>English</td>\n      <td>USA</td>\n      <td>8.0</td>\n      <td>4214426.0</td>\n      <td>792291.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>2021-01-21</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>movie_0007</td>\n      <td>Battle Story</td>\n      <td>TV Series</td>\n      <td>Sci-Fi</td>\n      <td>NaN</td>\n      <td>2003</td>\n      <td>52.0</td>\n      <td>TV-Y7</td>\n      <td>English</td>\n      <td>USA</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>158.0</td>\n      <td>False</td>\n      <td>2021-11-30</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>movie_0008</td>\n      <td>Old House</td>\n      <td>Movie</td>\n      <td>Horror</td>\n      <td>NaN</td>\n      <td>1991</td>\n      <td>109.0</td>\n      <td>TV-Y</td>\n      <td>Spanish</td>\n      <td>South Korea</td>\n      <td>7.7</td>\n      <td>629216.0</td>\n      <td>3995303.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>2020-10-04</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>movie_0009</td>\n      <td>Dragon Empire</td>\n      <td>Movie</td>\n      <td>Biography</td>\n      <td>NaN</td>\n      <td>2013</td>\n      <td>123.0</td>\n      <td>PG</td>\n      <td>Spanish</td>\n      <td>USA</td>\n      <td>8.4</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>2024-05-09</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>movie_0010</td>\n      <td>Dream War</td>\n      <td>Limited Series</td>\n      <td>Thriller</td>\n      <td>Animation</td>\n      <td>2019</td>\n      <td>49.0</td>\n      <td>TV-Y</td>\n      <td>Italian</td>\n      <td>Japan</td>\n      <td>8.2</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>12.0</td>\n      <td>32.0</td>\n      <td>False</td>\n      <td>2021-09-20</td>\n      <td>False</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":22},{"cell_type":"code","source":"movies['content_type'].unique()\nshows_no_seasons = (\n                    ((movies['content_type'] == 'TV Series') | (movies['content_type'] == \"Limited Series\")) \n                    & (movies[\"number_of_seasons\"].isna())\n                   )\nmovies[shows_no_seasons].head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-08T02:08:45.522839Z","iopub.execute_input":"2025-10-08T02:08:45.523199Z","iopub.status.idle":"2025-10-08T02:08:45.545897Z","shell.execute_reply.started":"2025-10-08T02:08:45.523173Z","shell.execute_reply":"2025-10-08T02:08:45.544911Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n  has_large_values = (abs_vals > 1e6).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n","output_type":"stream"},{"execution_count":52,"output_type":"execute_result","data":{"text/plain":"       movie_id            title content_type genre_primary genre_secondary  \\\n6    movie_0007     Battle Story    TV Series        Sci-Fi             NaN   \n15   movie_0016       Last Dream    TV Series        Family             NaN   \n34   movie_0035    Princess Love    TV Series        Family         Romance   \n53   movie_0054  Phoenix Journey    TV Series       Romance         History   \n177  movie_0178     Our Princess    TV Series     Animation             NaN   \n\n     release_year  duration_minutes rating language country_of_origin  \\\n6            2003              52.0  TV-Y7  English               USA   \n15           1999              54.0  PG-13  Spanish               USA   \n34           1994              38.0  TV-PG  English               USA   \n53           2021              35.0  TV-MA  English            France   \n177          2002              55.0      G  English       South Korea   \n\n     imdb_rating  production_budget  box_office_revenue  number_of_seasons  \\\n6            NaN                NaN                 NaN                NaN   \n15           6.0                NaN                 NaN                NaN   \n34           7.4                NaN                 NaN                NaN   \n53           8.8                NaN                 NaN                NaN   \n177          5.6                NaN                 NaN                NaN   \n\n     number_of_episodes  is_netflix_original added_to_platform  \\\n6                 158.0                False        2021-11-30   \n15                139.0                False        2022-01-19   \n34                 62.0                False        2021-03-01   \n53                 78.0                False        2024-11-17   \n177                 6.0                False        2023-11-30   \n\n     content_warning  \n6              False  \n15             False  \n34             False  \n53             False  \n177            False  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movie_id</th>\n      <th>title</th>\n      <th>content_type</th>\n      <th>genre_primary</th>\n      <th>genre_secondary</th>\n      <th>release_year</th>\n      <th>duration_minutes</th>\n      <th>rating</th>\n      <th>language</th>\n      <th>country_of_origin</th>\n      <th>imdb_rating</th>\n      <th>production_budget</th>\n      <th>box_office_revenue</th>\n      <th>number_of_seasons</th>\n      <th>number_of_episodes</th>\n      <th>is_netflix_original</th>\n      <th>added_to_platform</th>\n      <th>content_warning</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>6</th>\n      <td>movie_0007</td>\n      <td>Battle Story</td>\n      <td>TV Series</td>\n      <td>Sci-Fi</td>\n      <td>NaN</td>\n      <td>2003</td>\n      <td>52.0</td>\n      <td>TV-Y7</td>\n      <td>English</td>\n      <td>USA</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>158.0</td>\n      <td>False</td>\n      <td>2021-11-30</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>movie_0016</td>\n      <td>Last Dream</td>\n      <td>TV Series</td>\n      <td>Family</td>\n      <td>NaN</td>\n      <td>1999</td>\n      <td>54.0</td>\n      <td>PG-13</td>\n      <td>Spanish</td>\n      <td>USA</td>\n      <td>6.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>139.0</td>\n      <td>False</td>\n      <td>2022-01-19</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>34</th>\n      <td>movie_0035</td>\n      <td>Princess Love</td>\n      <td>TV Series</td>\n      <td>Family</td>\n      <td>Romance</td>\n      <td>1994</td>\n      <td>38.0</td>\n      <td>TV-PG</td>\n      <td>English</td>\n      <td>USA</td>\n      <td>7.4</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>62.0</td>\n      <td>False</td>\n      <td>2021-03-01</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>53</th>\n      <td>movie_0054</td>\n      <td>Phoenix Journey</td>\n      <td>TV Series</td>\n      <td>Romance</td>\n      <td>History</td>\n      <td>2021</td>\n      <td>35.0</td>\n      <td>TV-MA</td>\n      <td>English</td>\n      <td>France</td>\n      <td>8.8</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>78.0</td>\n      <td>False</td>\n      <td>2024-11-17</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>177</th>\n      <td>movie_0178</td>\n      <td>Our Princess</td>\n      <td>TV Series</td>\n      <td>Animation</td>\n      <td>NaN</td>\n      <td>2002</td>\n      <td>55.0</td>\n      <td>G</td>\n      <td>English</td>\n      <td>South Korea</td>\n      <td>5.6</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>6.0</td>\n      <td>False</td>\n      <td>2023-11-30</td>\n      <td>False</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":52},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}