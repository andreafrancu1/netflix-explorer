{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":12653991,"sourceType":"datasetVersion","datasetId":7996917}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Netflix Study\nThe goal of this project is to practice and showcase key data science skills, like EDA, SQL style querying, statistical analysis, visualization, and storytelling.","metadata":{}},{"cell_type":"code","source":"import numpy as np \nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score, mean_absolute_error","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-10-12T19:11:23.753325Z","iopub.execute_input":"2025-10-12T19:11:23.754013Z","iopub.status.idle":"2025-10-12T19:11:23.758660Z","shell.execute_reply.started":"2025-10-12T19:11:23.753986Z","shell.execute_reply":"2025-10-12T19:11:23.757555Z"}},"outputs":[],"execution_count":272},{"cell_type":"markdown","source":"## EDA","metadata":{}},{"cell_type":"code","source":"movies = pd.read_csv(\"/kaggle/input/netflix-2025user-behavior-dataset-210k-records/movies.csv\")\nrec_logs = pd.read_csv(\"/kaggle/input/netflix-2025user-behavior-dataset-210k-records/recommendation_logs.csv\")\nreviews = pd.read_csv(\"/kaggle/input/netflix-2025user-behavior-dataset-210k-records/reviews.csv\")\nsearch_logs = pd.read_csv(\"/kaggle/input/netflix-2025user-behavior-dataset-210k-records/search_logs.csv\")\nusers = pd.read_csv(\"/kaggle/input/netflix-2025user-behavior-dataset-210k-records/users.csv\")\nsessions = pd.read_csv(\"/kaggle/input/netflix-2025user-behavior-dataset-210k-records/watch_history.csv\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-12T19:11:23.765619Z","iopub.execute_input":"2025-10-12T19:11:23.765920Z","iopub.status.idle":"2025-10-12T19:11:24.299201Z","shell.execute_reply.started":"2025-10-12T19:11:23.765901Z","shell.execute_reply":"2025-10-12T19:11:24.298441Z"}},"outputs":[],"execution_count":273},{"cell_type":"code","source":"names = [\"movies\", \"users\", \"sessions\"]\ndfs = [movies, users, sessions] \nfor name, df in zip(names, dfs):\n    print(f\"----------------------- {name} -----------------------\")\n    print(df.shape)\n    #print(df.head(2))\n    print(df.info())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-12T19:11:24.300319Z","iopub.execute_input":"2025-10-12T19:11:24.300607Z","iopub.status.idle":"2025-10-12T19:11:24.381281Z","shell.execute_reply.started":"2025-10-12T19:11:24.300553Z","shell.execute_reply":"2025-10-12T19:11:24.380414Z"}},"outputs":[{"name":"stdout","text":"----------------------- movies -----------------------\n(1040, 18)\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1040 entries, 0 to 1039\nData columns (total 18 columns):\n #   Column               Non-Null Count  Dtype  \n---  ------               --------------  -----  \n 0   movie_id             1040 non-null   object \n 1   title                1040 non-null   object \n 2   content_type         1040 non-null   object \n 3   genre_primary        1040 non-null   object \n 4   genre_secondary      373 non-null    object \n 5   release_year         1040 non-null   int64  \n 6   duration_minutes     1040 non-null   float64\n 7   rating               1040 non-null   object \n 8   language             1040 non-null   object \n 9   country_of_origin    1040 non-null   object \n 10  imdb_rating          890 non-null    float64\n 11  production_budget    365 non-null    float64\n 12  box_office_revenue   331 non-null    float64\n 13  number_of_seasons    289 non-null    float64\n 14  number_of_episodes   321 non-null    float64\n 15  is_netflix_original  1040 non-null   bool   \n 16  added_to_platform    1040 non-null   object \n 17  content_warning      1040 non-null   bool   \ndtypes: bool(2), float64(6), int64(1), object(9)\nmemory usage: 132.2+ KB\nNone\n----------------------- users -----------------------\n(10300, 16)\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 10300 entries, 0 to 10299\nData columns (total 16 columns):\n #   Column                   Non-Null Count  Dtype  \n---  ------                   --------------  -----  \n 0   user_id                  10300 non-null  object \n 1   email                    10300 non-null  object \n 2   first_name               10300 non-null  object \n 3   last_name                10300 non-null  object \n 4   age                      9071 non-null   float64\n 5   gender                   9476 non-null   object \n 6   country                  10300 non-null  object \n 7   state_province           10300 non-null  object \n 8   city                     10300 non-null  object \n 9   subscription_plan        10300 non-null  object \n 10  subscription_start_date  10300 non-null  object \n 11  is_active                10300 non-null  bool   \n 12  monthly_spend            9283 non-null   float64\n 13  primary_device           10300 non-null  object \n 14  household_size           8755 non-null   float64\n 15  created_at               10300 non-null  object \ndtypes: bool(1), float64(3), object(12)\nmemory usage: 1.2+ MB\nNone\n----------------------- sessions -----------------------\n(105000, 12)\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 105000 entries, 0 to 104999\nData columns (total 12 columns):\n #   Column                  Non-Null Count   Dtype  \n---  ------                  --------------   -----  \n 0   session_id              105000 non-null  object \n 1   user_id                 105000 non-null  object \n 2   movie_id                105000 non-null  object \n 3   watch_date              105000 non-null  object \n 4   device_type             105000 non-null  object \n 5   watch_duration_minutes  92668 non-null   float64\n 6   progress_percentage     96486 non-null   float64\n 7   action                  105000 non-null  object \n 8   quality                 105000 non-null  object \n 9   location_country        105000 non-null  object \n 10  is_download             105000 non-null  bool   \n 11  user_rating             21097 non-null   float64\ndtypes: bool(1), float64(3), object(8)\nmemory usage: 8.9+ MB\nNone\n","output_type":"stream"}],"execution_count":274},{"cell_type":"markdown","source":"### Duplicate Removal","metadata":{}},{"cell_type":"code","source":"# check for any duplicates & remove them\nfor name, df in zip(names, dfs):\n    dupes = df.duplicated().sum()\n    print(f\"{name}: {dupes} duplicate rows\")\n    df.drop_duplicates(inplace=True)\n    dupes = df.duplicated().sum()\n    print(f\"{dupes} duplicate rows after removal\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-12T19:11:24.382097Z","iopub.execute_input":"2025-10-12T19:11:24.382343Z","iopub.status.idle":"2025-10-12T19:11:24.676948Z","shell.execute_reply.started":"2025-10-12T19:11:24.382324Z","shell.execute_reply":"2025-10-12T19:11:24.675923Z"}},"outputs":[{"name":"stdout","text":"movies: 40 duplicate rows\n0 duplicate rows after removal\nusers: 300 duplicate rows\n0 duplicate rows after removal\nsessions: 5000 duplicate rows\n0 duplicate rows after removal\n","output_type":"stream"}],"execution_count":275},{"cell_type":"code","source":"# check for any rows with missing primary keys\nfor name, df in [(\"movies\", movies), (\"users\", users), (\"sessions\", sessions)]:\n    print(f\"{name}: \")\n    for col in ['movie_id', 'user_id', 'session_id']:\n        if col in df.columns:\n            print(\"           \", col, df[col].isna().sum())\n    print(f\"-----------------------\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-12T19:11:24.678981Z","iopub.execute_input":"2025-10-12T19:11:24.679245Z","iopub.status.idle":"2025-10-12T19:11:24.705518Z","shell.execute_reply.started":"2025-10-12T19:11:24.679226Z","shell.execute_reply":"2025-10-12T19:11:24.704654Z"}},"outputs":[{"name":"stdout","text":"movies: \n            movie_id 0\n-----------------------\nusers: \n            user_id 0\n-----------------------\nsessions: \n            movie_id 0\n            user_id 0\n            session_id 0\n-----------------------\n","output_type":"stream"}],"execution_count":276},{"cell_type":"markdown","source":"### Handling Missing Data\nThis section takes a look at missing data in the datasets and how to handle each case. The type of data imputation used depends on several factors, like what percent of the values are missing, if the data should be categorical or numerical, which samples the data is missing from, etc.","metadata":{}},{"cell_type":"markdown","source":"### Row Removal:\n- `df.dropna(axis = 0, how = 'any')` removes rows with any missing values\n- `df.dropna(axis = 0, subset = 'desired_column')` removes rows with missing values in the specified column\nProbably do not want to remove entire rows as this can break joins later. Dropping missing data can also be risky if the data is missing from specific groups of samples that we do not want to exclude from our data.\n### Data Imputation Options:\n- Interpolation: `df['desired_column'].interpolate(method = 'linear')` good for linear or chronological data\n- fillna/ffill/bfill: `df['desired_column'].ffill()` fills missing value with the previously filled value\n- Conditional fill: `df.loc[df['desired_column'].isna(), 'desired_columns'] = df['other_column'] / 10`\n- \"Unknown\" fill (for categorical data): `fillna('Unknown')`","metadata":{}},{"cell_type":"code","source":"#check for missing entries\nfor name, df in zip(names, dfs):\n    print(f\"----------------------- {name} -----------------------\")    \n    na_counts = df.isna().sum() # get NaN ocounts\n    na_means = df.isna().mean().round(2) # get percent of missing data instead of counts\n    \n    na_counts = na_counts[na_counts > 0] # only include the categories with missing values\n    na_means = na_means[na_means > 0]\n    \n    #print(na_counts.sort_values(ascending=False)) \n    print(na_means.sort_values(ascending=False)) ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-12T19:11:24.706741Z","iopub.execute_input":"2025-10-12T19:11:24.707074Z","iopub.status.idle":"2025-10-12T19:11:24.826301Z","shell.execute_reply.started":"2025-10-12T19:11:24.707046Z","shell.execute_reply":"2025-10-12T19:11:24.825458Z"}},"outputs":[{"name":"stdout","text":"----------------------- movies -----------------------\nnumber_of_seasons     0.72\nnumber_of_episodes    0.70\nbox_office_revenue    0.68\nproduction_budget     0.65\ngenre_secondary       0.64\nimdb_rating           0.14\ndtype: float64\n----------------------- users -----------------------\nhousehold_size    0.15\nage               0.12\nmonthly_spend     0.10\ngender            0.08\ndtype: float64\n----------------------- sessions -----------------------\nuser_rating               0.80\nwatch_duration_minutes    0.12\nprogress_percentage       0.08\ndtype: float64\n","output_type":"stream"}],"execution_count":277},{"cell_type":"markdown","source":"### Movies","metadata":{}},{"cell_type":"code","source":"movies.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-12T19:11:24.827175Z","iopub.execute_input":"2025-10-12T19:11:24.827555Z","iopub.status.idle":"2025-10-12T19:11:24.837884Z","shell.execute_reply.started":"2025-10-12T19:11:24.827530Z","shell.execute_reply":"2025-10-12T19:11:24.837193Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 1000 entries, 0 to 999\nData columns (total 18 columns):\n #   Column               Non-Null Count  Dtype  \n---  ------               --------------  -----  \n 0   movie_id             1000 non-null   object \n 1   title                1000 non-null   object \n 2   content_type         1000 non-null   object \n 3   genre_primary        1000 non-null   object \n 4   genre_secondary      357 non-null    object \n 5   release_year         1000 non-null   int64  \n 6   duration_minutes     1000 non-null   float64\n 7   rating               1000 non-null   object \n 8   language             1000 non-null   object \n 9   country_of_origin    1000 non-null   object \n 10  imdb_rating          856 non-null    float64\n 11  production_budget    353 non-null    float64\n 12  box_office_revenue   322 non-null    float64\n 13  number_of_seasons    275 non-null    float64\n 14  number_of_episodes   305 non-null    float64\n 15  is_netflix_original  1000 non-null   bool   \n 16  added_to_platform    1000 non-null   object \n 17  content_warning      1000 non-null   bool   \ndtypes: bool(2), float64(6), int64(1), object(9)\nmemory usage: 134.8+ KB\n","output_type":"stream"}],"execution_count":278},{"cell_type":"code","source":"movies.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-12T19:11:24.838742Z","iopub.execute_input":"2025-10-12T19:11:24.839002Z","iopub.status.idle":"2025-10-12T19:11:24.867712Z","shell.execute_reply.started":"2025-10-12T19:11:24.838983Z","shell.execute_reply":"2025-10-12T19:11:24.866850Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n  has_large_values = (abs_vals > 1e6).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n","output_type":"stream"},{"execution_count":279,"output_type":"execute_result","data":{"text/plain":"     movie_id            title     content_type genre_primary genre_secondary  \\\n0  movie_0001    Dragon Legend  Stand-up Comedy       History        Thriller   \n1  movie_0002    Storm Warrior  Stand-up Comedy        Sci-Fi             NaN   \n2  movie_0003      Fire Family            Movie         Drama             NaN   \n3  movie_0004     Our Princess      Documentary        Sci-Fi             NaN   \n4  movie_0005  Warrior Mission      Documentary         Sport         Mystery   \n\n   release_year  duration_minutes rating  language country_of_origin  \\\n0          2014              35.0   TV-Y    French             Japan   \n1          2017              37.0     PG  Japanese               USA   \n2          2003             142.0  TV-MA   English               USA   \n3          2011             131.0  NC-17  Japanese               USA   \n4          2015              91.0   TV-G   English               USA   \n\n   imdb_rating  production_budget  box_office_revenue  number_of_seasons  \\\n0          NaN                NaN                 NaN                NaN   \n1          3.3                NaN                 NaN                NaN   \n2          8.5          2114120.0                 NaN                NaN   \n3          5.3                NaN                 NaN                NaN   \n4          3.1                NaN                 NaN                NaN   \n\n   number_of_episodes  is_netflix_original added_to_platform  content_warning  \n0                 NaN                False        2023-08-07            False  \n1                 NaN                False        2022-01-28             True  \n2                 NaN                False        2021-05-04             True  \n3                 NaN                False        2022-11-26            False  \n4                 NaN                False        2023-06-15            False  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movie_id</th>\n      <th>title</th>\n      <th>content_type</th>\n      <th>genre_primary</th>\n      <th>genre_secondary</th>\n      <th>release_year</th>\n      <th>duration_minutes</th>\n      <th>rating</th>\n      <th>language</th>\n      <th>country_of_origin</th>\n      <th>imdb_rating</th>\n      <th>production_budget</th>\n      <th>box_office_revenue</th>\n      <th>number_of_seasons</th>\n      <th>number_of_episodes</th>\n      <th>is_netflix_original</th>\n      <th>added_to_platform</th>\n      <th>content_warning</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>movie_0001</td>\n      <td>Dragon Legend</td>\n      <td>Stand-up Comedy</td>\n      <td>History</td>\n      <td>Thriller</td>\n      <td>2014</td>\n      <td>35.0</td>\n      <td>TV-Y</td>\n      <td>French</td>\n      <td>Japan</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>2023-08-07</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>movie_0002</td>\n      <td>Storm Warrior</td>\n      <td>Stand-up Comedy</td>\n      <td>Sci-Fi</td>\n      <td>NaN</td>\n      <td>2017</td>\n      <td>37.0</td>\n      <td>PG</td>\n      <td>Japanese</td>\n      <td>USA</td>\n      <td>3.3</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>2022-01-28</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>movie_0003</td>\n      <td>Fire Family</td>\n      <td>Movie</td>\n      <td>Drama</td>\n      <td>NaN</td>\n      <td>2003</td>\n      <td>142.0</td>\n      <td>TV-MA</td>\n      <td>English</td>\n      <td>USA</td>\n      <td>8.5</td>\n      <td>2114120.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>2021-05-04</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>movie_0004</td>\n      <td>Our Princess</td>\n      <td>Documentary</td>\n      <td>Sci-Fi</td>\n      <td>NaN</td>\n      <td>2011</td>\n      <td>131.0</td>\n      <td>NC-17</td>\n      <td>Japanese</td>\n      <td>USA</td>\n      <td>5.3</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>2022-11-26</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>movie_0005</td>\n      <td>Warrior Mission</td>\n      <td>Documentary</td>\n      <td>Sport</td>\n      <td>Mystery</td>\n      <td>2015</td>\n      <td>91.0</td>\n      <td>TV-G</td>\n      <td>English</td>\n      <td>USA</td>\n      <td>3.1</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>2023-06-15</td>\n      <td>False</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":279},{"cell_type":"code","source":"# simple column to start with is secondary genre\nprint(\"NA in genre_secondary before imputation: \", movies['genre_secondary'].isna().sum())\n\n# add column to keep track of which values were missing\nmovies['genre_sec_was_missing'] = (movies['genre_secondary'].isna()).astype(int)\n\n# can just fill this as unknown, many movies just won't have one\nmovies['genre_secondary'] = movies['genre_secondary'].fillna('Unknown')\n\nprint(\"NA in genre_secondary after imputation: \", movies['genre_secondary'].isna().sum())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-12T19:11:24.868656Z","iopub.execute_input":"2025-10-12T19:11:24.868942Z","iopub.status.idle":"2025-10-12T19:11:24.886475Z","shell.execute_reply.started":"2025-10-12T19:11:24.868922Z","shell.execute_reply":"2025-10-12T19:11:24.885492Z"}},"outputs":[{"name":"stdout","text":"NA in genre_secondary before imputation:  643\nNA in genre_secondary after imputation:  0\n","output_type":"stream"}],"execution_count":280},{"cell_type":"code","source":"movies['content_type'].unique()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-12T19:11:24.887402Z","iopub.execute_input":"2025-10-12T19:11:24.887732Z","iopub.status.idle":"2025-10-12T19:11:24.910039Z","shell.execute_reply.started":"2025-10-12T19:11:24.887712Z","shell.execute_reply":"2025-10-12T19:11:24.909124Z"}},"outputs":[{"execution_count":281,"output_type":"execute_result","data":{"text/plain":"array(['Stand-up Comedy', 'Movie', 'Documentary', 'TV Series',\n       'Limited Series'], dtype=object)"},"metadata":{}}],"execution_count":281},{"cell_type":"code","source":"print(\"------------------- before imputation -------------------\")\nprint(\"NA in number_of_seasons: \", movies['number_of_seasons'].isna().sum())\nprint(\"NA in number_of_episodes: \", movies['number_of_episodes'].isna().sum())\n\n# add column to keep track of which values were missing\nmovies['num_seasons_was_missing'] = (movies['number_of_seasons'].isna()).astype(int)\nmovies['num_episodes_was_missing'] = (movies['number_of_episodes'].isna()).astype(int)\n\n# number_of_seasons and number_of_episodes may be missing for items that are actually movies\n# fill those with 0's\n# movies['content_type'].unique()\nmovies.loc[movies['content_type'].isin(['Stand-up Comedy', 'Movie', 'Documentary'])\n            & (movies['number_of_seasons'].isna()), 'number_of_seasons'\n] = 0\n\nmovies.loc[movies['content_type'].isin(['Stand-up Comedy', 'Movie', 'Documentary'])\n            & (movies['number_of_episodes'].isna()), 'number_of_episodes'\n] = 0\n\nprint(\"-------------- after movie data imputation --------------\")\n\nprint(\"NA in number_of_seasons: \", movies['number_of_seasons'].isna().sum())\nprint(\"NA in number_of_episodes: \", movies['number_of_episodes'].isna().sum())\n\n\n# Limited Series typically only have 1 season so fill this in for the missing ones\nmovies.loc[(movies['content_type'] == 'Limited Series')\n            & (movies['number_of_seasons'].isna()), 'number_of_seasons'\n] = 1\n\nprint(\"--------- after limited series data imputation ----------\")\n\nprint(\"NA in number_of_seasons: \", movies['number_of_seasons'].isna().sum())\nprint(\"NA in number_of_episodes: \", movies['number_of_episodes'].isna().sum())\n#movies.loc[movies['number_of_seasons'].isna()].head()\n\n# fill remaining 26 data points with median of existing tv series\nnum_seasons_med = movies.loc[(movies['content_type'] == 'Limited Series'), 'number_of_seasons'].median()\nmovies.loc[(movies['number_of_seasons'].isna()), 'number_of_seasons'] = num_seasons_med\n\nprint(\"---------------- after median imputation ----------------\")\n\nprint(\"NA in number_of_seasons: \", movies['number_of_seasons'].isna().sum())\nprint(\"NA in number_of_episodes: \", movies['number_of_episodes'].isna().sum())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-12T19:11:24.912805Z","iopub.execute_input":"2025-10-12T19:11:24.913057Z","iopub.status.idle":"2025-10-12T19:11:24.938915Z","shell.execute_reply.started":"2025-10-12T19:11:24.913038Z","shell.execute_reply":"2025-10-12T19:11:24.937969Z"}},"outputs":[{"name":"stdout","text":"------------------- before imputation -------------------\nNA in number_of_seasons:  725\nNA in number_of_episodes:  695\n-------------- after movie data imputation --------------\nNA in number_of_seasons:  30\nNA in number_of_episodes:  0\n--------- after limited series data imputation ----------\nNA in number_of_seasons:  26\nNA in number_of_episodes:  0\n---------------- after median imputation ----------------\nNA in number_of_seasons:  0\nNA in number_of_episodes:  0\n","output_type":"stream"}],"execution_count":282},{"cell_type":"code","source":"print(\"NA in imdb_rating before imputation: \", movies['imdb_rating'].isna().sum())\n\n# add column to keep track of which values were missing\nmovies['imdb_rating_was_missing'] = (movies['imdb_rating'].isna()).astype(int)\n\n# missing imdb_ratings can use avg session rating for that movie\n# make temporary df using avg user ratings, and merge with movies\nuser_ratings = sessions.groupby('movie_id')['user_rating'].mean()\nmovie_ratings = movies.merge(user_ratings, on='movie_id', how='left')\n\nmovie_ratings.head()\n\n# plug those ratings back into original df\nmovies['imdb_rating'] = movies['imdb_rating'].fillna(movie_ratings['user_rating'])\n\nprint(\"NA in imdb_rating after imputation: \", movies['imdb_rating'].isna().sum())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-12T19:11:24.940099Z","iopub.execute_input":"2025-10-12T19:11:24.940877Z","iopub.status.idle":"2025-10-12T19:11:24.973241Z","shell.execute_reply.started":"2025-10-12T19:11:24.940845Z","shell.execute_reply":"2025-10-12T19:11:24.972368Z"}},"outputs":[{"name":"stdout","text":"NA in imdb_rating before imputation:  144\nNA in imdb_rating after imputation:  0\n","output_type":"stream"}],"execution_count":283},{"cell_type":"code","source":"# production_budget has a lot of data missing\n# multi layer imputation pipeline\n# start with granular fill (content type + genre), then broader safter net by genre\nprint(\"--------------------- before imputation ---------------------\")\nprint(\"NA in production_budget: \", movies['production_budget'].isna().sum())\n\n# add column to keep track of which values were missing\nmovies['prod_budget_was_missing'] = (movies['production_budget'].isna()).astype(int)\n\n# fill with median budget by movie genre and type\nmovies['production_budget'] = movies.groupby(['content_type', 'genre_primary'])['production_budget'].transform(\n    lambda x: x.fillna(x.median())\n)\nprint(\"------ after median imputation (group by type & genre) ------\")\nprint(\"NA in production_budget: \", movies['production_budget'].isna().sum())\n\n# fill with median budget by genre only\nmovies['production_budget'] = movies.groupby('genre_primary')['production_budget'].transform(\n    lambda x: x.fillna(x.median())\n)\nprint(\"------- after median imputation (group by genre only) -------\")\nprint(\"NA in production_budget: \", movies['production_budget'].isna().sum())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-12T19:11:24.974217Z","iopub.execute_input":"2025-10-12T19:11:24.974425Z","iopub.status.idle":"2025-10-12T19:11:25.011693Z","shell.execute_reply.started":"2025-10-12T19:11:24.974409Z","shell.execute_reply":"2025-10-12T19:11:25.010906Z"}},"outputs":[{"name":"stdout","text":"--------------------- before imputation ---------------------\nNA in production_budget:  647\n------ after median imputation (group by type & genre) ------\nNA in production_budget:  556\n------- after median imputation (group by genre only) -------\nNA in production_budget:  0\n","output_type":"stream"}],"execution_count":284},{"cell_type":"code","source":"# box office revenue\n# similar approach as production budget\nprint(\"--------------------- before imputation ---------------------\")\nprint(\"NA in box_office_revenue: \", movies['box_office_revenue'].isna().sum())\n\n# add column to keep track of which values were missing\nmovies['revenue_was_missing'] = (movies['box_office_revenue'].isna()).astype(int)\n\n# fill with median revenue by movie genre and type\nmovies['box_office_revenue'] = movies.groupby(['content_type', 'genre_primary'])['box_office_revenue'].transform(\n    lambda x: x.fillna(x.median())\n)\nprint(\"------ after median imputation (group by type & genre) ------\")\nprint(\"NA in box_office_revenue: \", movies['box_office_revenue'].isna().sum())\n\n# fill with median revenue by genre only\nmovies['box_office_revenue'] = movies.groupby('genre_primary')['box_office_revenue'].transform(\n    lambda x: x.fillna(x.median())\n)\nprint(\"------- after median imputation (group by genre only) -------\")\nprint(\"NA in box_office_revenue: \", movies['box_office_revenue'].isna().sum())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-12T19:11:25.012626Z","iopub.execute_input":"2025-10-12T19:11:25.012944Z","iopub.status.idle":"2025-10-12T19:11:25.052179Z","shell.execute_reply.started":"2025-10-12T19:11:25.012917Z","shell.execute_reply":"2025-10-12T19:11:25.051093Z"}},"outputs":[{"name":"stdout","text":"--------------------- before imputation ---------------------\nNA in box_office_revenue:  678\n------ after median imputation (group by type & genre) ------\nNA in box_office_revenue:  556\n------- after median imputation (group by genre only) -------\nNA in box_office_revenue:  0\n","output_type":"stream"}],"execution_count":285},{"cell_type":"code","source":"na_movies = movies.isna().mean().round(2) # get percent of missing data\nna_movies = na_movies[na_movies > 0] # only include the categories with missing values\nprint(\"NA in Movies: \", na_movies.sort_values(ascending=False)) ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-12T19:11:25.053145Z","iopub.execute_input":"2025-10-12T19:11:25.053388Z","iopub.status.idle":"2025-10-12T19:11:25.062047Z","shell.execute_reply.started":"2025-10-12T19:11:25.053369Z","shell.execute_reply":"2025-10-12T19:11:25.061173Z"}},"outputs":[{"name":"stdout","text":"NA in Movies:  Series([], dtype: float64)\n","output_type":"stream"}],"execution_count":286},{"cell_type":"markdown","source":"### Users\nMove on to Users df now that there are no missing values in the Movies df.","metadata":{}},{"cell_type":"code","source":"na_users = users.isna().mean().round(2) # get percent of missing data\nna_users = na_users[na_users > 0] # only include the categories with missing values\nprint(\"NA in Users:\\n\", na_users.sort_values(ascending=False)) ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-12T19:11:25.062915Z","iopub.execute_input":"2025-10-12T19:11:25.063226Z","iopub.status.idle":"2025-10-12T19:11:25.083747Z","shell.execute_reply.started":"2025-10-12T19:11:25.063197Z","shell.execute_reply":"2025-10-12T19:11:25.083024Z"}},"outputs":[{"name":"stdout","text":"NA in Users:\n household_size    0.15\nage               0.12\nmonthly_spend     0.10\ngender            0.08\ndtype: float64\n","output_type":"stream"}],"execution_count":287},{"cell_type":"code","source":"users.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-12T19:11:25.084758Z","iopub.execute_input":"2025-10-12T19:11:25.085041Z","iopub.status.idle":"2025-10-12T19:11:25.109606Z","shell.execute_reply.started":"2025-10-12T19:11:25.085022Z","shell.execute_reply":"2025-10-12T19:11:25.108708Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 10000 entries, 0 to 9999\nData columns (total 16 columns):\n #   Column                   Non-Null Count  Dtype  \n---  ------                   --------------  -----  \n 0   user_id                  10000 non-null  object \n 1   email                    10000 non-null  object \n 2   first_name               10000 non-null  object \n 3   last_name                10000 non-null  object \n 4   age                      8806 non-null   float64\n 5   gender                   9200 non-null   object \n 6   country                  10000 non-null  object \n 7   state_province           10000 non-null  object \n 8   city                     10000 non-null  object \n 9   subscription_plan        10000 non-null  object \n 10  subscription_start_date  10000 non-null  object \n 11  is_active                10000 non-null  bool   \n 12  monthly_spend            9007 non-null   float64\n 13  primary_device           10000 non-null  object \n 14  household_size           8500 non-null   float64\n 15  created_at               10000 non-null  object \ndtypes: bool(1), float64(3), object(12)\nmemory usage: 1.2+ MB\n","output_type":"stream"}],"execution_count":288},{"cell_type":"code","source":"users.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-12T19:11:25.110510Z","iopub.execute_input":"2025-10-12T19:11:25.110756Z","iopub.status.idle":"2025-10-12T19:11:25.133023Z","shell.execute_reply.started":"2025-10-12T19:11:25.110738Z","shell.execute_reply":"2025-10-12T19:11:25.132120Z"}},"outputs":[{"execution_count":289,"output_type":"execute_result","data":{"text/plain":"      user_id                      email first_name last_name   age  gender  \\\n0  user_00001   figueroajohn@example.org      Erica     Garza  43.0    Male   \n1  user_00002      blakeerik@example.com     Joshua   Bernard  38.0    Male   \n2  user_00003        smiller@example.net    Barbara  Williams  32.0  Female   \n3  user_00004  mitchellclark@example.com    Chelsea  Ferguson  11.0    Male   \n4  user_00005      richard13@example.net      Jason    Foster  21.0  Female   \n\n  country state_province                city subscription_plan  \\\n0     USA  Massachusetts  North Jefferyhaven             Basic   \n1     USA          Texas      North Noahstad          Premium+   \n2     USA       Michigan          Traciebury          Standard   \n3     USA           Ohio          South Noah          Standard   \n4     USA        Arizona         West Donald          Standard   \n\n  subscription_start_date  is_active  monthly_spend primary_device  \\\n0              2024-04-08       True          36.06         Laptop   \n1              2024-05-24       True          14.59        Desktop   \n2              2023-09-22      False          11.71        Desktop   \n3              2024-08-21       True          28.56         Laptop   \n4              2024-10-28       True           9.54        Desktop   \n\n   household_size                  created_at  \n0             1.0  2023-04-01 14:40:50.540242  \n1             2.0  2024-10-10 15:39:11.030515  \n2             3.0  2024-06-29 14:27:49.560875  \n3             2.0  2023-04-11 01:01:59.614841  \n4             6.0  2025-04-12 19:59:30.137806  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>user_id</th>\n      <th>email</th>\n      <th>first_name</th>\n      <th>last_name</th>\n      <th>age</th>\n      <th>gender</th>\n      <th>country</th>\n      <th>state_province</th>\n      <th>city</th>\n      <th>subscription_plan</th>\n      <th>subscription_start_date</th>\n      <th>is_active</th>\n      <th>monthly_spend</th>\n      <th>primary_device</th>\n      <th>household_size</th>\n      <th>created_at</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>user_00001</td>\n      <td>figueroajohn@example.org</td>\n      <td>Erica</td>\n      <td>Garza</td>\n      <td>43.0</td>\n      <td>Male</td>\n      <td>USA</td>\n      <td>Massachusetts</td>\n      <td>North Jefferyhaven</td>\n      <td>Basic</td>\n      <td>2024-04-08</td>\n      <td>True</td>\n      <td>36.06</td>\n      <td>Laptop</td>\n      <td>1.0</td>\n      <td>2023-04-01 14:40:50.540242</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>user_00002</td>\n      <td>blakeerik@example.com</td>\n      <td>Joshua</td>\n      <td>Bernard</td>\n      <td>38.0</td>\n      <td>Male</td>\n      <td>USA</td>\n      <td>Texas</td>\n      <td>North Noahstad</td>\n      <td>Premium+</td>\n      <td>2024-05-24</td>\n      <td>True</td>\n      <td>14.59</td>\n      <td>Desktop</td>\n      <td>2.0</td>\n      <td>2024-10-10 15:39:11.030515</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>user_00003</td>\n      <td>smiller@example.net</td>\n      <td>Barbara</td>\n      <td>Williams</td>\n      <td>32.0</td>\n      <td>Female</td>\n      <td>USA</td>\n      <td>Michigan</td>\n      <td>Traciebury</td>\n      <td>Standard</td>\n      <td>2023-09-22</td>\n      <td>False</td>\n      <td>11.71</td>\n      <td>Desktop</td>\n      <td>3.0</td>\n      <td>2024-06-29 14:27:49.560875</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>user_00004</td>\n      <td>mitchellclark@example.com</td>\n      <td>Chelsea</td>\n      <td>Ferguson</td>\n      <td>11.0</td>\n      <td>Male</td>\n      <td>USA</td>\n      <td>Ohio</td>\n      <td>South Noah</td>\n      <td>Standard</td>\n      <td>2024-08-21</td>\n      <td>True</td>\n      <td>28.56</td>\n      <td>Laptop</td>\n      <td>2.0</td>\n      <td>2023-04-11 01:01:59.614841</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>user_00005</td>\n      <td>richard13@example.net</td>\n      <td>Jason</td>\n      <td>Foster</td>\n      <td>21.0</td>\n      <td>Female</td>\n      <td>USA</td>\n      <td>Arizona</td>\n      <td>West Donald</td>\n      <td>Standard</td>\n      <td>2024-10-28</td>\n      <td>True</td>\n      <td>9.54</td>\n      <td>Desktop</td>\n      <td>6.0</td>\n      <td>2025-04-12 19:59:30.137806</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":289},{"cell_type":"code","source":"users.groupby(['country', 'subscription_plan'])['household_size'].describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-12T19:11:25.133963Z","iopub.execute_input":"2025-10-12T19:11:25.134241Z","iopub.status.idle":"2025-10-12T19:11:25.178683Z","shell.execute_reply.started":"2025-10-12T19:11:25.134213Z","shell.execute_reply":"2025-10-12T19:11:25.177846Z"}},"outputs":[{"execution_count":290,"output_type":"execute_result","data":{"text/plain":"                            count      mean       std  min  25%  50%  75%  max\ncountry subscription_plan                                                     \nCanada  Basic               513.0  2.787524  1.551109  1.0  2.0  2.0  4.0  8.0\n        Premium             911.0  2.867179  1.571354  1.0  2.0  2.0  4.0  8.0\n        Premium+            231.0  3.034632  1.606675  1.0  2.0  3.0  4.0  8.0\n        Standard            911.0  2.863886  1.534627  1.0  2.0  2.0  4.0  8.0\nUSA     Basic              1183.0  2.820795  1.574438  1.0  2.0  2.0  4.0  8.0\n        Premium            2055.0  2.877859  1.575485  1.0  2.0  3.0  4.0  8.0\n        Premium+            615.0  2.956098  1.573298  1.0  2.0  3.0  4.0  8.0\n        Standard           2081.0  2.851514  1.552776  1.0  2.0  2.0  4.0  8.0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>count</th>\n      <th>mean</th>\n      <th>std</th>\n      <th>min</th>\n      <th>25%</th>\n      <th>50%</th>\n      <th>75%</th>\n      <th>max</th>\n    </tr>\n    <tr>\n      <th>country</th>\n      <th>subscription_plan</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"4\" valign=\"top\">Canada</th>\n      <th>Basic</th>\n      <td>513.0</td>\n      <td>2.787524</td>\n      <td>1.551109</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>4.0</td>\n      <td>8.0</td>\n    </tr>\n    <tr>\n      <th>Premium</th>\n      <td>911.0</td>\n      <td>2.867179</td>\n      <td>1.571354</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>4.0</td>\n      <td>8.0</td>\n    </tr>\n    <tr>\n      <th>Premium+</th>\n      <td>231.0</td>\n      <td>3.034632</td>\n      <td>1.606675</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>4.0</td>\n      <td>8.0</td>\n    </tr>\n    <tr>\n      <th>Standard</th>\n      <td>911.0</td>\n      <td>2.863886</td>\n      <td>1.534627</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>4.0</td>\n      <td>8.0</td>\n    </tr>\n    <tr>\n      <th rowspan=\"4\" valign=\"top\">USA</th>\n      <th>Basic</th>\n      <td>1183.0</td>\n      <td>2.820795</td>\n      <td>1.574438</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>4.0</td>\n      <td>8.0</td>\n    </tr>\n    <tr>\n      <th>Premium</th>\n      <td>2055.0</td>\n      <td>2.877859</td>\n      <td>1.575485</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>4.0</td>\n      <td>8.0</td>\n    </tr>\n    <tr>\n      <th>Premium+</th>\n      <td>615.0</td>\n      <td>2.956098</td>\n      <td>1.573298</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>4.0</td>\n      <td>8.0</td>\n    </tr>\n    <tr>\n      <th>Standard</th>\n      <td>2081.0</td>\n      <td>2.851514</td>\n      <td>1.552776</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>4.0</td>\n      <td>8.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":290},{"cell_type":"code","source":"# household size\n# 15% of data points missing a value for this\n# could normally look at the number of user profiles but we don't have access to that\n# can do median imputation grouping by subscription plan and country \nprint(\"--------------------- before imputation ---------------------\")\nprint(\"NA in household_size: \", users['household_size'].isna().sum())\n\n# add column to keep track of which values were missing\nusers['household_size_was_missing'] = (users['household_size'].isna()).astype(int)\n\n\nusers['household_size'] = users.groupby(['country', 'subscription_plan'])['household_size'].transform(\n    lambda x: x.fillna(x.median())\n)\n\nprint(\"--------------------- after imputation ---------------------\")\nprint(\"NA in household_size: \", users['household_size'].isna().sum())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-12T19:11:25.179694Z","iopub.execute_input":"2025-10-12T19:11:25.179942Z","iopub.status.idle":"2025-10-12T19:11:25.195885Z","shell.execute_reply.started":"2025-10-12T19:11:25.179923Z","shell.execute_reply":"2025-10-12T19:11:25.195124Z"}},"outputs":[{"name":"stdout","text":"--------------------- before imputation ---------------------\nNA in household_size:  1500\n--------------------- after imputation ---------------------\nNA in household_size:  0\n","output_type":"stream"}],"execution_count":291},{"cell_type":"code","source":"users.groupby(['country', 'subscription_plan'])['age'].describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-12T19:11:25.196729Z","iopub.execute_input":"2025-10-12T19:11:25.196990Z","iopub.status.idle":"2025-10-12T19:11:25.236621Z","shell.execute_reply.started":"2025-10-12T19:11:25.196962Z","shell.execute_reply":"2025-10-12T19:11:25.235847Z"}},"outputs":[{"execution_count":292,"output_type":"execute_result","data":{"text/plain":"                            count       mean        std  min   25%   50%  \\\ncountry subscription_plan                                                  \nCanada  Basic               538.0  35.347584  13.299025  2.0  27.0  35.0   \n        Premium             926.0  34.950324  12.909570 -5.0  26.0  35.0   \n        Premium+            242.0  34.454545  13.610772 -5.0  26.0  34.0   \n        Standard            940.0  34.570213  12.205830 -7.0  26.0  34.5   \nUSA     Basic              1194.0  34.572864  12.482751 -5.0  26.0  34.0   \n        Premium            2164.0  34.801294  12.032906 -5.0  27.0  35.0   \n        Premium+            637.0  35.494505  13.249495 -1.0  27.0  35.0   \n        Standard           2165.0  35.608776  12.614826 -2.0  27.0  35.0   \n\n                            75%    max  \ncountry subscription_plan               \nCanada  Basic              43.0  109.0  \n        Premium            43.0  104.0  \n        Premium+           42.0   97.0  \n        Standard           43.0   92.0  \nUSA     Basic              43.0   95.0  \n        Premium            43.0   94.0  \n        Premium+           42.0  109.0  \n        Standard           44.0  107.0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>count</th>\n      <th>mean</th>\n      <th>std</th>\n      <th>min</th>\n      <th>25%</th>\n      <th>50%</th>\n      <th>75%</th>\n      <th>max</th>\n    </tr>\n    <tr>\n      <th>country</th>\n      <th>subscription_plan</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"4\" valign=\"top\">Canada</th>\n      <th>Basic</th>\n      <td>538.0</td>\n      <td>35.347584</td>\n      <td>13.299025</td>\n      <td>2.0</td>\n      <td>27.0</td>\n      <td>35.0</td>\n      <td>43.0</td>\n      <td>109.0</td>\n    </tr>\n    <tr>\n      <th>Premium</th>\n      <td>926.0</td>\n      <td>34.950324</td>\n      <td>12.909570</td>\n      <td>-5.0</td>\n      <td>26.0</td>\n      <td>35.0</td>\n      <td>43.0</td>\n      <td>104.0</td>\n    </tr>\n    <tr>\n      <th>Premium+</th>\n      <td>242.0</td>\n      <td>34.454545</td>\n      <td>13.610772</td>\n      <td>-5.0</td>\n      <td>26.0</td>\n      <td>34.0</td>\n      <td>42.0</td>\n      <td>97.0</td>\n    </tr>\n    <tr>\n      <th>Standard</th>\n      <td>940.0</td>\n      <td>34.570213</td>\n      <td>12.205830</td>\n      <td>-7.0</td>\n      <td>26.0</td>\n      <td>34.5</td>\n      <td>43.0</td>\n      <td>92.0</td>\n    </tr>\n    <tr>\n      <th rowspan=\"4\" valign=\"top\">USA</th>\n      <th>Basic</th>\n      <td>1194.0</td>\n      <td>34.572864</td>\n      <td>12.482751</td>\n      <td>-5.0</td>\n      <td>26.0</td>\n      <td>34.0</td>\n      <td>43.0</td>\n      <td>95.0</td>\n    </tr>\n    <tr>\n      <th>Premium</th>\n      <td>2164.0</td>\n      <td>34.801294</td>\n      <td>12.032906</td>\n      <td>-5.0</td>\n      <td>27.0</td>\n      <td>35.0</td>\n      <td>43.0</td>\n      <td>94.0</td>\n    </tr>\n    <tr>\n      <th>Premium+</th>\n      <td>637.0</td>\n      <td>35.494505</td>\n      <td>13.249495</td>\n      <td>-1.0</td>\n      <td>27.0</td>\n      <td>35.0</td>\n      <td>42.0</td>\n      <td>109.0</td>\n    </tr>\n    <tr>\n      <th>Standard</th>\n      <td>2165.0</td>\n      <td>35.608776</td>\n      <td>12.614826</td>\n      <td>-2.0</td>\n      <td>27.0</td>\n      <td>35.0</td>\n      <td>44.0</td>\n      <td>107.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":292},{"cell_type":"code","source":"# age\n# 12% of data points missing a value for this\nprint(\"--------------------- before imputation ---------------------\")\nprint(\"NA in age: \", users['age'].isna().sum())\n\n# add column to keep track of which values were missing\nusers['age_was_missing'] = (users['age'].isna()).astype(int)\n\nusers['age'] = users.groupby(['country', 'subscription_plan'])['age'].transform(\n    lambda x: x.fillna(x.median())\n)\n\n# clip ages to reasonable ranges (no negative ages or ages of 109)\nusers['age'] = users['age'].clip(lower=13, upper=95)\n\n\nprint(\"--------------------- after imputation ---------------------\")\nprint(\"NA in age: \", users['age'].isna().sum())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-12T19:11:25.237411Z","iopub.execute_input":"2025-10-12T19:11:25.237697Z","iopub.status.idle":"2025-10-12T19:11:25.254149Z","shell.execute_reply.started":"2025-10-12T19:11:25.237677Z","shell.execute_reply":"2025-10-12T19:11:25.253124Z"}},"outputs":[{"name":"stdout","text":"--------------------- before imputation ---------------------\nNA in age:  1194\n--------------------- after imputation ---------------------\nNA in age:  0\n","output_type":"stream"}],"execution_count":293},{"cell_type":"code","source":"users.groupby(['country', 'subscription_plan'])['age'].describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-12T19:11:25.254996Z","iopub.execute_input":"2025-10-12T19:11:25.255238Z","iopub.status.idle":"2025-10-12T19:11:25.292022Z","shell.execute_reply.started":"2025-10-12T19:11:25.255210Z","shell.execute_reply":"2025-10-12T19:11:25.291239Z"}},"outputs":[{"execution_count":294,"output_type":"execute_result","data":{"text/plain":"                            count       mean        std   min   25%   50%  \\\ncountry subscription_plan                                                   \nCanada  Basic               599.0  35.383973  12.083163  13.0  28.0  35.0   \n        Premium            1061.0  35.126296  11.556795  13.0  28.0  35.0   \n        Premium+            272.0  34.636029  12.286399  13.0  27.0  34.0   \n        Standard           1075.0  34.752093  10.950229  13.0  28.0  34.5   \nUSA     Basic              1367.0  34.632772  11.377125  13.0  28.0  34.0   \n        Premium            2446.0  34.977923  10.955325  13.0  28.0  35.0   \n        Premium+            733.0  35.491132  11.856334  13.0  28.0  35.0   \n        Standard           2447.0  35.658357  11.523668  13.0  28.0  35.0   \n\n                            75%   max  \ncountry subscription_plan              \nCanada  Basic              42.0  95.0  \n        Premium            42.0  95.0  \n        Premium+           42.0  95.0  \n        Standard           41.5  92.0  \nUSA     Basic              41.0  95.0  \n        Premium            42.0  94.0  \n        Premium+           41.0  95.0  \n        Standard           43.0  95.0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>count</th>\n      <th>mean</th>\n      <th>std</th>\n      <th>min</th>\n      <th>25%</th>\n      <th>50%</th>\n      <th>75%</th>\n      <th>max</th>\n    </tr>\n    <tr>\n      <th>country</th>\n      <th>subscription_plan</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"4\" valign=\"top\">Canada</th>\n      <th>Basic</th>\n      <td>599.0</td>\n      <td>35.383973</td>\n      <td>12.083163</td>\n      <td>13.0</td>\n      <td>28.0</td>\n      <td>35.0</td>\n      <td>42.0</td>\n      <td>95.0</td>\n    </tr>\n    <tr>\n      <th>Premium</th>\n      <td>1061.0</td>\n      <td>35.126296</td>\n      <td>11.556795</td>\n      <td>13.0</td>\n      <td>28.0</td>\n      <td>35.0</td>\n      <td>42.0</td>\n      <td>95.0</td>\n    </tr>\n    <tr>\n      <th>Premium+</th>\n      <td>272.0</td>\n      <td>34.636029</td>\n      <td>12.286399</td>\n      <td>13.0</td>\n      <td>27.0</td>\n      <td>34.0</td>\n      <td>42.0</td>\n      <td>95.0</td>\n    </tr>\n    <tr>\n      <th>Standard</th>\n      <td>1075.0</td>\n      <td>34.752093</td>\n      <td>10.950229</td>\n      <td>13.0</td>\n      <td>28.0</td>\n      <td>34.5</td>\n      <td>41.5</td>\n      <td>92.0</td>\n    </tr>\n    <tr>\n      <th rowspan=\"4\" valign=\"top\">USA</th>\n      <th>Basic</th>\n      <td>1367.0</td>\n      <td>34.632772</td>\n      <td>11.377125</td>\n      <td>13.0</td>\n      <td>28.0</td>\n      <td>34.0</td>\n      <td>41.0</td>\n      <td>95.0</td>\n    </tr>\n    <tr>\n      <th>Premium</th>\n      <td>2446.0</td>\n      <td>34.977923</td>\n      <td>10.955325</td>\n      <td>13.0</td>\n      <td>28.0</td>\n      <td>35.0</td>\n      <td>42.0</td>\n      <td>94.0</td>\n    </tr>\n    <tr>\n      <th>Premium+</th>\n      <td>733.0</td>\n      <td>35.491132</td>\n      <td>11.856334</td>\n      <td>13.0</td>\n      <td>28.0</td>\n      <td>35.0</td>\n      <td>41.0</td>\n      <td>95.0</td>\n    </tr>\n    <tr>\n      <th>Standard</th>\n      <td>2447.0</td>\n      <td>35.658357</td>\n      <td>11.523668</td>\n      <td>13.0</td>\n      <td>28.0</td>\n      <td>35.0</td>\n      <td>43.0</td>\n      <td>95.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":294},{"cell_type":"code","source":"users.groupby('subscription_plan')['monthly_spend'].describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-12T19:11:25.292818Z","iopub.execute_input":"2025-10-12T19:11:25.293159Z","iopub.status.idle":"2025-10-12T19:11:25.314009Z","shell.execute_reply.started":"2025-10-12T19:11:25.293140Z","shell.execute_reply":"2025-10-12T19:11:25.313049Z"}},"outputs":[{"execution_count":295,"output_type":"execute_result","data":{"text/plain":"                    count       mean        std   min     25%     50%  \\\nsubscription_plan                                                       \nBasic              1769.0  20.624765  61.961549  0.25  7.2600  13.180   \nPremium            3168.0  21.686878  64.935733  0.11  7.7075  13.480   \nPremium+            892.0  20.458105  54.103954  0.15  7.6975  13.505   \nStandard           3178.0  24.279110  72.327195  0.11  8.0425  13.840   \n\n                       75%     max  \nsubscription_plan                   \nBasic              20.4500  954.98  \nPremium            21.8125  997.80  \nPremium+           21.5100  836.40  \nStandard           22.1375  984.45  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>count</th>\n      <th>mean</th>\n      <th>std</th>\n      <th>min</th>\n      <th>25%</th>\n      <th>50%</th>\n      <th>75%</th>\n      <th>max</th>\n    </tr>\n    <tr>\n      <th>subscription_plan</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Basic</th>\n      <td>1769.0</td>\n      <td>20.624765</td>\n      <td>61.961549</td>\n      <td>0.25</td>\n      <td>7.2600</td>\n      <td>13.180</td>\n      <td>20.4500</td>\n      <td>954.98</td>\n    </tr>\n    <tr>\n      <th>Premium</th>\n      <td>3168.0</td>\n      <td>21.686878</td>\n      <td>64.935733</td>\n      <td>0.11</td>\n      <td>7.7075</td>\n      <td>13.480</td>\n      <td>21.8125</td>\n      <td>997.80</td>\n    </tr>\n    <tr>\n      <th>Premium+</th>\n      <td>892.0</td>\n      <td>20.458105</td>\n      <td>54.103954</td>\n      <td>0.15</td>\n      <td>7.6975</td>\n      <td>13.505</td>\n      <td>21.5100</td>\n      <td>836.40</td>\n    </tr>\n    <tr>\n      <th>Standard</th>\n      <td>3178.0</td>\n      <td>24.279110</td>\n      <td>72.327195</td>\n      <td>0.11</td>\n      <td>8.0425</td>\n      <td>13.840</td>\n      <td>22.1375</td>\n      <td>984.45</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":295},{"cell_type":"code","source":"# monthly spend\n# 10% missing\n# can definitely use subscription plan grouping\n# some outliers here too, $900+ and $0.11 - can log transform to get more realistic range\nprint(\"--------------------- before imputation ---------------------\")\nprint(\"NA in monthly_spend: \", users['monthly_spend'].isna().sum())\n\n# add column to keep track of which values were missing\nusers['monthly_spend_was_missing'] = (users['monthly_spend'].isna()).astype(int)\n\n# log transformation \nusers['monthly_spend'] = np.log(users['monthly_spend']) \n\n# median imputation grouping by subscription plan\nusers['monthly_spend'] = users.groupby('subscription_plan')['monthly_spend'].transform(\n    lambda x: x.fillna(x.median())\n)\n\n# transform back \nusers['monthly_spend'] = np.exp(users['monthly_spend']) \n\nprint(\"--------------------- after imputation ---------------------\")\nprint(\"NA in monthly_spend: \", users['monthly_spend'].isna().sum())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-12T19:11:25.314953Z","iopub.execute_input":"2025-10-12T19:11:25.315330Z","iopub.status.idle":"2025-10-12T19:11:25.329125Z","shell.execute_reply.started":"2025-10-12T19:11:25.315302Z","shell.execute_reply":"2025-10-12T19:11:25.328200Z"}},"outputs":[{"name":"stdout","text":"--------------------- before imputation ---------------------\nNA in monthly_spend:  993\n--------------------- after imputation ---------------------\nNA in monthly_spend:  0\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/pandas/core/arraylike.py:399: RuntimeWarning: invalid value encountered in log\n  result = getattr(ufunc, method)(*inputs, **kwargs)\n","output_type":"stream"}],"execution_count":296},{"cell_type":"code","source":"# gender - 8% missing\n# categorical\n# set all NA values to 'Prefer not to say' category\nprint(users['gender'].unique())\n\nprint(\"--------------------- before imputation ---------------------\")\nprint(\"NA in gender: \", users['gender'].isna().sum())\n\n# add column to keep track of which values were missing\nusers['gender_was_missing'] = (users['gender'].isna()).astype(int)\n\nusers['gender'] = users['gender'].fillna('Prefer not to say')\n\nprint(\"--------------------- after imputation ---------------------\")\nprint(\"NA in gender: \", users['gender'].isna().sum())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-12T19:11:25.330343Z","iopub.execute_input":"2025-10-12T19:11:25.331159Z","iopub.status.idle":"2025-10-12T19:11:25.355352Z","shell.execute_reply.started":"2025-10-12T19:11:25.331126Z","shell.execute_reply":"2025-10-12T19:11:25.354420Z"}},"outputs":[{"name":"stdout","text":"['Male' 'Female' nan 'Other' 'Prefer not to say']\n--------------------- before imputation ---------------------\nNA in gender:  800\n--------------------- after imputation ---------------------\nNA in gender:  0\n","output_type":"stream"}],"execution_count":297},{"cell_type":"code","source":"na_users = users.isna().mean().round(2) # get percent of missing data\nna_users = na_users[na_users > 0] # only include the categories with missing values\nprint(\"NA in Users:\\n\", na_users.sort_values(ascending=False)) ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-12T19:11:25.356443Z","iopub.execute_input":"2025-10-12T19:11:25.356700Z","iopub.status.idle":"2025-10-12T19:11:25.383258Z","shell.execute_reply.started":"2025-10-12T19:11:25.356680Z","shell.execute_reply":"2025-10-12T19:11:25.382527Z"}},"outputs":[{"name":"stdout","text":"NA in Users:\n Series([], dtype: float64)\n","output_type":"stream"}],"execution_count":298},{"cell_type":"markdown","source":"### Sessions\nMove on to Sessions df now that there are no missing values in the Movies or Users df.","metadata":{}},{"cell_type":"code","source":"na_sessions = sessions.isna().mean().round(2) # get percent of missing data\nna_sessions = na_sessions[na_sessions > 0] # only include the categories with missing values\nprint(\"NA in Sessions:\\n\", na_sessions.sort_values(ascending=False)) ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-12T19:11:25.383996Z","iopub.execute_input":"2025-10-12T19:11:25.384292Z","iopub.status.idle":"2025-10-12T19:11:25.435988Z","shell.execute_reply.started":"2025-10-12T19:11:25.384268Z","shell.execute_reply":"2025-10-12T19:11:25.435246Z"}},"outputs":[{"name":"stdout","text":"NA in Sessions:\n user_rating               0.80\nwatch_duration_minutes    0.12\nprogress_percentage       0.08\ndtype: float64\n","output_type":"stream"}],"execution_count":299},{"cell_type":"code","source":"# user rating (or lack of rating) is important data\n# 80% missing! \n# fill missing ratings with 3 stars - people typically rate when they love or hate but not when neutral\nprint(sessions['user_rating'].unique())\nprint(\"--------------------- before imputation ---------------------\")\nprint(\"NA in user_rating: \", sessions['user_rating'].isna().sum())\n\nsessions['user_rating_was_missing'] = (sessions['user_rating'].isna()).astype(int)\nsessions['user_rating'] = sessions['user_rating'].fillna(3)\n\nprint(\"--------------------- after imputation ---------------------\")\nprint(\"NA in user_rating: \", sessions['user_rating'].isna().sum())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-12T19:11:25.439136Z","iopub.execute_input":"2025-10-12T19:11:25.439385Z","iopub.status.idle":"2025-10-12T19:11:25.450400Z","shell.execute_reply.started":"2025-10-12T19:11:25.439358Z","shell.execute_reply":"2025-10-12T19:11:25.449686Z"}},"outputs":[{"name":"stdout","text":"[nan  1.  5.  3.  2.  4.]\n--------------------- before imputation ---------------------\nNA in user_rating:  79886\n--------------------- after imputation ---------------------\nNA in user_rating:  0\n","output_type":"stream"}],"execution_count":300},{"cell_type":"code","source":"sessions[sessions['watch_duration_minutes'].isna() | sessions['progress_percentage'].isna()].head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-12T19:11:25.451124Z","iopub.execute_input":"2025-10-12T19:11:25.451439Z","iopub.status.idle":"2025-10-12T19:11:25.482448Z","shell.execute_reply.started":"2025-10-12T19:11:25.451419Z","shell.execute_reply":"2025-10-12T19:11:25.481558Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n  has_large_values = (abs_vals > 1e6).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n","output_type":"stream"},{"execution_count":301,"output_type":"execute_result","data":{"text/plain":"        session_id     user_id    movie_id  watch_date device_type  \\\n10  session_000011  user_01686  movie_0903  2025-05-17    Smart TV   \n12  session_000013  user_06950  movie_0764  2024-07-06      Mobile   \n17  session_000018  user_01185  movie_0671  2025-12-05    Smart TV   \n29  session_000030  user_00190  movie_0114  2024-07-08    Smart TV   \n51  session_000052  user_00776  movie_0968  2024-04-26      Mobile   \n\n    watch_duration_minutes  progress_percentage     action quality  \\\n10                     NaN                 62.1    started      HD   \n12                     3.7                  NaN    stopped      HD   \n17                     NaN                 92.0    started      4K   \n29                     NaN                 12.8    stopped      HD   \n51                   158.6                  NaN  completed      4K   \n\n   location_country  is_download  user_rating  user_rating_was_missing  \n10              USA        False          3.0                        1  \n12           Canada        False          3.0                        1  \n17           Canada         True          3.0                        0  \n29              USA         True          3.0                        1  \n51              USA        False          3.0                        1  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>session_id</th>\n      <th>user_id</th>\n      <th>movie_id</th>\n      <th>watch_date</th>\n      <th>device_type</th>\n      <th>watch_duration_minutes</th>\n      <th>progress_percentage</th>\n      <th>action</th>\n      <th>quality</th>\n      <th>location_country</th>\n      <th>is_download</th>\n      <th>user_rating</th>\n      <th>user_rating_was_missing</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>10</th>\n      <td>session_000011</td>\n      <td>user_01686</td>\n      <td>movie_0903</td>\n      <td>2025-05-17</td>\n      <td>Smart TV</td>\n      <td>NaN</td>\n      <td>62.1</td>\n      <td>started</td>\n      <td>HD</td>\n      <td>USA</td>\n      <td>False</td>\n      <td>3.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>session_000013</td>\n      <td>user_06950</td>\n      <td>movie_0764</td>\n      <td>2024-07-06</td>\n      <td>Mobile</td>\n      <td>3.7</td>\n      <td>NaN</td>\n      <td>stopped</td>\n      <td>HD</td>\n      <td>Canada</td>\n      <td>False</td>\n      <td>3.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>session_000018</td>\n      <td>user_01185</td>\n      <td>movie_0671</td>\n      <td>2025-12-05</td>\n      <td>Smart TV</td>\n      <td>NaN</td>\n      <td>92.0</td>\n      <td>started</td>\n      <td>4K</td>\n      <td>Canada</td>\n      <td>True</td>\n      <td>3.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>session_000030</td>\n      <td>user_00190</td>\n      <td>movie_0114</td>\n      <td>2024-07-08</td>\n      <td>Smart TV</td>\n      <td>NaN</td>\n      <td>12.8</td>\n      <td>stopped</td>\n      <td>HD</td>\n      <td>USA</td>\n      <td>True</td>\n      <td>3.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>51</th>\n      <td>session_000052</td>\n      <td>user_00776</td>\n      <td>movie_0968</td>\n      <td>2024-04-26</td>\n      <td>Mobile</td>\n      <td>158.6</td>\n      <td>NaN</td>\n      <td>completed</td>\n      <td>4K</td>\n      <td>USA</td>\n      <td>False</td>\n      <td>3.0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":301},{"cell_type":"code","source":"# watch_duration_minutes - 12% missing\n#print(sessions['watch_duration_minutes'].info())\nprint(\"--------------------- before imputation ---------------------\")\nprint(\"NA in watch_duration_minutes: \", sessions['watch_duration_minutes'].isna().sum())\n\nsessions['watch_duration_was_missing'] = (sessions['watch_duration_minutes'].isna()).astype(int)\n\n# can use duration_minutes and progress_percentage to calculate watch_duration_minutes\nsessions = sessions.merge(movies[['movie_id', 'duration_minutes', 'content_type', 'genre_primary']], on='movie_id', how='left')\nsessions['watch_duration_minutes'] = sessions['watch_duration_minutes'].fillna(\n    sessions['duration_minutes'] * (sessions['progress_percentage'] / 100)\n)\n\nprint(\"---- after imputation using duration and progress percentage ----\")\nprint(\"NA in watch_duration_minutes: \", sessions['watch_duration_minutes'].isna().sum())\n\n# use median imputation for the rest - grouping by user, content, and genre\nsessions['watch_duration_minutes'] = sessions.groupby(['user_id', 'content_type', 'genre_primary'])['watch_duration_minutes'].transform(\n    lambda x: x.fillna(x.median())\n)\n\nprint(\"-- after median imputation grouping by users, content, and genre --\")\nprint(\"NA in watch_duration_minutes: \", sessions['watch_duration_minutes'].isna().sum())\n\n# use median imputation for the rest - grouping by content and genre\nsessions['watch_duration_minutes'] = sessions.groupby(['content_type', 'genre_primary'])['watch_duration_minutes'].transform(\n    lambda x: x.fillna(x.median())\n)\n\nprint(\"-- after median imputation grouping by content and genre only --\")\nprint(\"NA in watch_duration_minutes: \", sessions['watch_duration_minutes'].isna().sum())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-12T19:11:25.483375Z","iopub.execute_input":"2025-10-12T19:11:25.484005Z","iopub.status.idle":"2025-10-12T19:11:38.725289Z","shell.execute_reply.started":"2025-10-12T19:11:25.483977Z","shell.execute_reply":"2025-10-12T19:11:38.724432Z"}},"outputs":[{"name":"stdout","text":"--------------------- before imputation ---------------------\nNA in watch_duration_minutes:  11771\n---- after imputation using duration and progress percentage ----\nNA in watch_duration_minutes:  985\n-- after median imputation grouping by users, content, and genre --\nNA in watch_duration_minutes:  834\n-- after median imputation grouping by content and genre only --\nNA in watch_duration_minutes:  0\n","output_type":"stream"}],"execution_count":302},{"cell_type":"code","source":"# progress_percentage - 8% missing\n#print(sessions['progress_percentage'].info())\nprint(\"--------------------- before imputation ---------------------\")\nprint(\"NA in progress_percentage: \", sessions['progress_percentage'].isna().sum())\n\nsessions['progress_percentage_was_missing'] = (sessions['progress_percentage'].isna()).astype(int)\n\n# can use duration_minutes and watch_duration_minutes to calculate progress_percentage\n# this fills everything since watch_duration_minutes no longer has NAs\nsessions['progress_percentage'] = sessions['progress_percentage'].fillna(\n    sessions['watch_duration_minutes'] / (sessions['duration_minutes'] * 100)\n)\nprint(\"--------------------- after imputation ---------------------\")\nprint(\"NA in progress_percentage: \", sessions['progress_percentage'].isna().sum())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-12T19:11:38.726193Z","iopub.execute_input":"2025-10-12T19:11:38.726421Z","iopub.status.idle":"2025-10-12T19:11:38.738185Z","shell.execute_reply.started":"2025-10-12T19:11:38.726403Z","shell.execute_reply":"2025-10-12T19:11:38.737318Z"}},"outputs":[{"name":"stdout","text":"--------------------- before imputation ---------------------\nNA in progress_percentage:  8094\n--------------------- after imputation ---------------------\nNA in progress_percentage:  0\n","output_type":"stream"}],"execution_count":303},{"cell_type":"code","source":"na_sessions = sessions.isna().mean().round(2) # get percent of missing data\nna_sessions = na_sessions[na_sessions > 0] # only include the categories with missing values\nprint(\"NA in Users:\\n\", na_sessions.sort_values(ascending=False)) ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-12T19:11:58.613832Z","iopub.execute_input":"2025-10-12T19:11:58.614151Z","iopub.status.idle":"2025-10-12T19:11:58.679209Z","shell.execute_reply.started":"2025-10-12T19:11:58.614129Z","shell.execute_reply":"2025-10-12T19:11:58.678276Z"}},"outputs":[{"name":"stdout","text":"NA in Users:\n Series([], dtype: float64)\n","output_type":"stream"}],"execution_count":304},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}