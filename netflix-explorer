{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":12653991,"sourceType":"datasetVersion","datasetId":7996917}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Netflix Study\nThe goal of this project is to practice and showcase key data science skills, like EDA, SQL style querying, statistical analysis, visualization, and storytelling.","metadata":{}},{"cell_type":"code","source":"import numpy as np \nimport pandas as pd","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-10-09T01:07:47.516381Z","iopub.execute_input":"2025-10-09T01:07:47.516691Z","iopub.status.idle":"2025-10-09T01:07:49.759118Z","shell.execute_reply.started":"2025-10-09T01:07:47.516667Z","shell.execute_reply":"2025-10-09T01:07:49.758107Z"}},"outputs":[],"execution_count":2},{"cell_type":"markdown","source":"## EDA","metadata":{}},{"cell_type":"code","source":"movies = pd.read_csv(\"/kaggle/input/netflix-2025user-behavior-dataset-210k-records/movies.csv\")\nrec_logs = pd.read_csv(\"/kaggle/input/netflix-2025user-behavior-dataset-210k-records/recommendation_logs.csv\")\nreviews = pd.read_csv(\"/kaggle/input/netflix-2025user-behavior-dataset-210k-records/reviews.csv\")\nsearch_logs = pd.read_csv(\"/kaggle/input/netflix-2025user-behavior-dataset-210k-records/search_logs.csv\")\nusers = pd.read_csv(\"/kaggle/input/netflix-2025user-behavior-dataset-210k-records/users.csv\")\nsessions = pd.read_csv(\"/kaggle/input/netflix-2025user-behavior-dataset-210k-records/watch_history.csv\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-09T01:07:49.760742Z","iopub.execute_input":"2025-10-09T01:07:49.761329Z","iopub.status.idle":"2025-10-09T01:07:50.595894Z","shell.execute_reply.started":"2025-10-09T01:07:49.761303Z","shell.execute_reply":"2025-10-09T01:07:50.594948Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"names = [\"movies\", \"users\", \"sessions\"]\ndfs = [movies, users, sessions] \nfor name, df in zip(names, dfs):\n    print(f\"----------------------- {name} -----------------------\")\n    print(df.shape)\n    #print(df.head(2))\n    print(df.info())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-09T01:07:50.596883Z","iopub.execute_input":"2025-10-09T01:07:50.597149Z","iopub.status.idle":"2025-10-09T01:07:50.713521Z","shell.execute_reply.started":"2025-10-09T01:07:50.597128Z","shell.execute_reply":"2025-10-09T01:07:50.712299Z"}},"outputs":[{"name":"stdout","text":"----------------------- movies -----------------------\n(1040, 18)\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1040 entries, 0 to 1039\nData columns (total 18 columns):\n #   Column               Non-Null Count  Dtype  \n---  ------               --------------  -----  \n 0   movie_id             1040 non-null   object \n 1   title                1040 non-null   object \n 2   content_type         1040 non-null   object \n 3   genre_primary        1040 non-null   object \n 4   genre_secondary      373 non-null    object \n 5   release_year         1040 non-null   int64  \n 6   duration_minutes     1040 non-null   float64\n 7   rating               1040 non-null   object \n 8   language             1040 non-null   object \n 9   country_of_origin    1040 non-null   object \n 10  imdb_rating          890 non-null    float64\n 11  production_budget    365 non-null    float64\n 12  box_office_revenue   331 non-null    float64\n 13  number_of_seasons    289 non-null    float64\n 14  number_of_episodes   321 non-null    float64\n 15  is_netflix_original  1040 non-null   bool   \n 16  added_to_platform    1040 non-null   object \n 17  content_warning      1040 non-null   bool   \ndtypes: bool(2), float64(6), int64(1), object(9)\nmemory usage: 132.2+ KB\nNone\n----------------------- users -----------------------\n(10300, 16)\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 10300 entries, 0 to 10299\nData columns (total 16 columns):\n #   Column                   Non-Null Count  Dtype  \n---  ------                   --------------  -----  \n 0   user_id                  10300 non-null  object \n 1   email                    10300 non-null  object \n 2   first_name               10300 non-null  object \n 3   last_name                10300 non-null  object \n 4   age                      9071 non-null   float64\n 5   gender                   9476 non-null   object \n 6   country                  10300 non-null  object \n 7   state_province           10300 non-null  object \n 8   city                     10300 non-null  object \n 9   subscription_plan        10300 non-null  object \n 10  subscription_start_date  10300 non-null  object \n 11  is_active                10300 non-null  bool   \n 12  monthly_spend            9283 non-null   float64\n 13  primary_device           10300 non-null  object \n 14  household_size           8755 non-null   float64\n 15  created_at               10300 non-null  object \ndtypes: bool(1), float64(3), object(12)\nmemory usage: 1.2+ MB\nNone\n----------------------- sessions -----------------------\n(105000, 12)\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 105000 entries, 0 to 104999\nData columns (total 12 columns):\n #   Column                  Non-Null Count   Dtype  \n---  ------                  --------------   -----  \n 0   session_id              105000 non-null  object \n 1   user_id                 105000 non-null  object \n 2   movie_id                105000 non-null  object \n 3   watch_date              105000 non-null  object \n 4   device_type             105000 non-null  object \n 5   watch_duration_minutes  92668 non-null   float64\n 6   progress_percentage     96486 non-null   float64\n 7   action                  105000 non-null  object \n 8   quality                 105000 non-null  object \n 9   location_country        105000 non-null  object \n 10  is_download             105000 non-null  bool   \n 11  user_rating             21097 non-null   float64\ndtypes: bool(1), float64(3), object(8)\nmemory usage: 8.9+ MB\nNone\n","output_type":"stream"}],"execution_count":4},{"cell_type":"markdown","source":"### Duplicate Removal","metadata":{}},{"cell_type":"code","source":"# check for any duplicates & remove them\nfor name, df in zip(names, dfs):\n    dupes = df.duplicated().sum()\n    print(f\"{name}: {dupes} duplicate rows\")\n    df.drop_duplicates(inplace=True)\n    dupes = df.duplicated().sum()\n    print(f\"{dupes} duplicate rows after removal\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-09T01:07:50.716063Z","iopub.execute_input":"2025-10-09T01:07:50.716647Z","iopub.status.idle":"2025-10-09T01:07:51.037064Z","shell.execute_reply.started":"2025-10-09T01:07:50.716612Z","shell.execute_reply":"2025-10-09T01:07:51.036078Z"}},"outputs":[{"name":"stdout","text":"movies: 40 duplicate rows\n0 duplicate rows after removal\nusers: 300 duplicate rows\n0 duplicate rows after removal\nsessions: 5000 duplicate rows\n0 duplicate rows after removal\n","output_type":"stream"}],"execution_count":5},{"cell_type":"code","source":"# check for any rows with missing primary keys\nfor name, df in [(\"movies\", movies), (\"users\", users), (\"sessions\", sessions)]:\n    print(f\"{name}: \")\n    for col in ['movie_id', 'user_id', 'session_id']:\n        if col in df.columns:\n            print(\"           \", col, df[col].isna().sum())\n    print(f\"-----------------------\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-09T01:07:51.037941Z","iopub.execute_input":"2025-10-09T01:07:51.038189Z","iopub.status.idle":"2025-10-09T01:07:51.067064Z","shell.execute_reply.started":"2025-10-09T01:07:51.038168Z","shell.execute_reply":"2025-10-09T01:07:51.066201Z"}},"outputs":[{"name":"stdout","text":"movies: \n            movie_id 0\n-----------------------\nusers: \n            user_id 0\n-----------------------\nsessions: \n            movie_id 0\n            user_id 0\n            session_id 0\n-----------------------\n","output_type":"stream"}],"execution_count":6},{"cell_type":"markdown","source":"### Handling Missing Data\nThis section takes a look at missing data in the datasets and how to handle each case. The type of data imputation used depends on several factors, like what percent of the values are missing, if the data should be categorical or numerical, which samples the data is missing from, etc.","metadata":{}},{"cell_type":"markdown","source":"### Row Removal:\n- `df.dropna(axis = 0, how = 'any')` removes rows with any missing values\n- `df.dropna(axis = 0, subset = 'desired_column')` removes rows with missing values in the specified column\nProbably do not want to remove entire rows as this can break joins later. Dropping missing data can also be risky if the data is missing from specific groups of samples that we do not want to exclude from our data.\n### Data Imputation Options:\n- Interpolation: `df['desired_column'].interpolate(method = 'linear')` good for linear or chronological data\n- fillna/ffill/bfill: `df['desired_column'].ffill()` fills missing value with the previously filled value\n- Conditional fill: `df.loc[df['desired_column'].isna(), 'desired_columns'] = df['other_column'] / 10`\n- \"Unknown\" fill (for categorical data): `fillna('Unknown')`","metadata":{}},{"cell_type":"code","source":"#check for missing entries\nfor name, df in zip(names, dfs):\n    print(f\"----------------------- {name} -----------------------\")    \n    na_counts = df.isna().sum() # get NaN ocounts\n    na_means = df.isna().mean().round(2) # get percent of missing data instead of counts\n    \n    na_counts = na_counts[na_counts > 0] # only include the categories with missing values\n    na_means = na_means[na_means > 0]\n    \n    #print(na_counts.sort_values(ascending=False)) \n    print(na_means.sort_values(ascending=False)) ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-09T01:59:48.692371Z","iopub.execute_input":"2025-10-09T01:59:48.692672Z","iopub.status.idle":"2025-10-09T01:59:48.806565Z","shell.execute_reply.started":"2025-10-09T01:59:48.692651Z","shell.execute_reply":"2025-10-09T01:59:48.805755Z"}},"outputs":[{"name":"stdout","text":"----------------------- movies -----------------------\nbox_office_revenue    0.68\nproduction_budget     0.65\nimdb_rating           0.14\ndtype: float64\n----------------------- users -----------------------\nhousehold_size    0.15\nage               0.12\nmonthly_spend     0.10\ngender            0.08\ndtype: float64\n----------------------- sessions -----------------------\nwatch_duration_minutes    0.12\nprogress_percentage       0.08\ndtype: float64\n","output_type":"stream"}],"execution_count":56},{"cell_type":"markdown","source":"### Movies","metadata":{}},{"cell_type":"code","source":"# simple column to start with is secondary genre\n# can just fill this as unknown, many movies just won't have one\nmovies['genre_secondary'] = movies['genre_secondary'].fillna('Unknown')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-09T01:38:53.549237Z","iopub.execute_input":"2025-10-09T01:38:53.549514Z","iopub.status.idle":"2025-10-09T01:38:53.562105Z","shell.execute_reply.started":"2025-10-09T01:38:53.549496Z","shell.execute_reply":"2025-10-09T01:38:53.561339Z"}},"outputs":[{"execution_count":28,"output_type":"execute_result","data":{"text/plain":"array([3., 1., 5., 2., 4.])"},"metadata":{}}],"execution_count":28},{"cell_type":"code","source":"movies['content_type'].unique()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-09T01:55:09.448985Z","iopub.execute_input":"2025-10-09T01:55:09.449322Z","iopub.status.idle":"2025-10-09T01:55:09.456085Z","shell.execute_reply.started":"2025-10-09T01:55:09.449302Z","shell.execute_reply":"2025-10-09T01:55:09.454986Z"}},"outputs":[{"execution_count":48,"output_type":"execute_result","data":{"text/plain":"array(['Stand-up Comedy', 'Movie', 'Documentary', 'TV Series',\n       'Limited Series'], dtype=object)"},"metadata":{}}],"execution_count":48},{"cell_type":"code","source":"# number_of_seasons and number_of_episodes may be missing for items that are actually movies\n# fill those with 0's\n# movies['content_type'].unique()\nmovies.loc[movies['content_type'].isin(['Stand-up Comedy', 'Movie', 'Documentary'])\n            & (movies['number_of_seasons'].isna()), 'number_of_seasons'\n] = 0\n\nmovies.loc[movies['content_type'].isin(['Stand-up Comedy', 'Movie', 'Documentary'])\n            & (movies['number_of_episodes'].isna()), 'number_of_episodes'\n] = 0\n\n# Limited Series typically only have 1 season so fill this in for the missing ones\nmovies.loc[(movies['content_type'] == 'Limited Series')\n            & (movies['number_of_seasons'].isna()), 'number_of_seasons'\n] = 1\n\nmovies.loc[movies['number_of_seasons'].isna()].head()\n\n# fill remaining 26 data points with median of existing tv series\nnum_seasons_med = movies.loc[(movies['content_type'] == 'Limited Series'), 'number_of_seasons'].median()\nmovies.loc[(movies['number_of_seasons'].isna()), 'number_of_seasons'] = num_seasons_med\n\nprint(\"NA in number_of_seasons: \", movies['number_of_seasons'].isna().sum())\nprint(\"NA in number_of_episodes: \", movies['number_of_episodes'].isna().sum())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-09T01:59:43.234547Z","iopub.execute_input":"2025-10-09T01:59:43.235310Z","iopub.status.idle":"2025-10-09T01:59:43.248269Z","shell.execute_reply.started":"2025-10-09T01:59:43.235282Z","shell.execute_reply":"2025-10-09T01:59:43.247300Z"}},"outputs":[{"name":"stdout","text":"NA in number_of_seasons:  0\nNA in number_of_episodes:  0\n","output_type":"stream"}],"execution_count":55},{"cell_type":"markdown","source":"### Users","metadata":{}},{"cell_type":"code","source":"","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-09T01:38:18.464391Z","iopub.execute_input":"2025-10-09T01:38:18.464723Z","iopub.status.idle":"2025-10-09T01:38:18.474095Z","shell.execute_reply.started":"2025-10-09T01:38:18.464682Z","shell.execute_reply":"2025-10-09T01:38:18.473148Z"}},"outputs":[{"execution_count":26,"output_type":"execute_result","data":{"text/plain":"array([nan,  1.,  5.,  3.,  2.,  4.])"},"metadata":{}}],"execution_count":26},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Sessions","metadata":{}},{"cell_type":"code","source":"# user rating (or lack of rating) is important data\n# keep track of people who did not rate with a flag\n# fill missing ratings with 3 stars - people typically rate when they love or hate but not when neutral\nsessions['rated_flag'] = (~sessions['user_rating'].isna()).astype(int)\nsessions['user_rating'] = sessions['user_rating'].fillna(3)\nsessions['user_rating'].unique()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-09T01:38:03.460918Z","iopub.execute_input":"2025-10-09T01:38:03.461235Z","iopub.status.idle":"2025-10-09T01:38:03.469019Z","shell.execute_reply.started":"2025-10-09T01:38:03.461214Z","shell.execute_reply":"2025-10-09T01:38:03.468117Z"}},"outputs":[{"execution_count":25,"output_type":"execute_result","data":{"text/plain":"array([nan,  1.,  5.,  3.,  2.,  4.])"},"metadata":{}}],"execution_count":25},{"cell_type":"code","source":"","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-09T01:40:47.856191Z","iopub.execute_input":"2025-10-09T01:40:47.856483Z","iopub.status.idle":"2025-10-09T01:40:47.867777Z","shell.execute_reply.started":"2025-10-09T01:40:47.856465Z","shell.execute_reply":"2025-10-09T01:40:47.866949Z"}},"outputs":[{"execution_count":30,"output_type":"execute_result","data":{"text/plain":"movie_id               30\ntitle                  30\ncontent_type           30\ngenre_primary          30\ngenre_secondary        30\nrelease_year           30\nduration_minutes       30\nrating                 30\nlanguage               30\ncountry_of_origin      30\nimdb_rating            25\nproduction_budget       0\nbox_office_revenue      0\nnumber_of_seasons       0\nnumber_of_episodes     30\nis_netflix_original    30\nadded_to_platform      30\ncontent_warning        30\ndtype: int64"},"metadata":{}}],"execution_count":30},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}